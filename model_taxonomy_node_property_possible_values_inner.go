/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaxonomyNodePropertyPossibleValuesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxonomyNodePropertyPossibleValuesInner{}

// TaxonomyNodePropertyPossibleValuesInner A list of supported property value strings for this property.
type TaxonomyNodePropertyPossibleValuesInner struct {
	// The numeric ID of this property value.
	ValueId NullableInt32 `json:"value_id,omitempty"`
	// The name string of this property value.
	Name *string `json:"name,omitempty"`
	// The numeric scale ID of the scale to which this property value belongs.
	ScaleId NullableInt32 `json:"scale_id,omitempty"`
	// A list of numeric property value IDs this property value is equal to (if any).
	EqualTo []int32 `json:"equal_to,omitempty"`
}

// NewTaxonomyNodePropertyPossibleValuesInner instantiates a new TaxonomyNodePropertyPossibleValuesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxonomyNodePropertyPossibleValuesInner() *TaxonomyNodePropertyPossibleValuesInner {
	this := TaxonomyNodePropertyPossibleValuesInner{}
	return &this
}

// NewTaxonomyNodePropertyPossibleValuesInnerWithDefaults instantiates a new TaxonomyNodePropertyPossibleValuesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxonomyNodePropertyPossibleValuesInnerWithDefaults() *TaxonomyNodePropertyPossibleValuesInner {
	this := TaxonomyNodePropertyPossibleValuesInner{}
	return &this
}

// GetValueId returns the ValueId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxonomyNodePropertyPossibleValuesInner) GetValueId() int32 {
	if o == nil || IsNil(o.ValueId.Get()) {
		var ret int32
		return ret
	}
	return *o.ValueId.Get()
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxonomyNodePropertyPossibleValuesInner) GetValueIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueId.Get(), o.ValueId.IsSet()
}

// HasValueId returns a boolean if a field has been set.
func (o *TaxonomyNodePropertyPossibleValuesInner) HasValueId() bool {
	if o != nil && o.ValueId.IsSet() {
		return true
	}

	return false
}

// SetValueId gets a reference to the given NullableInt32 and assigns it to the ValueId field.
func (o *TaxonomyNodePropertyPossibleValuesInner) SetValueId(v int32) {
	o.ValueId.Set(&v)
}
// SetValueIdNil sets the value for ValueId to be an explicit nil
func (o *TaxonomyNodePropertyPossibleValuesInner) SetValueIdNil() {
	o.ValueId.Set(nil)
}

// UnsetValueId ensures that no value is present for ValueId, not even an explicit nil
func (o *TaxonomyNodePropertyPossibleValuesInner) UnsetValueId() {
	o.ValueId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaxonomyNodePropertyPossibleValuesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxonomyNodePropertyPossibleValuesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaxonomyNodePropertyPossibleValuesInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaxonomyNodePropertyPossibleValuesInner) SetName(v string) {
	o.Name = &v
}

// GetScaleId returns the ScaleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxonomyNodePropertyPossibleValuesInner) GetScaleId() int32 {
	if o == nil || IsNil(o.ScaleId.Get()) {
		var ret int32
		return ret
	}
	return *o.ScaleId.Get()
}

// GetScaleIdOk returns a tuple with the ScaleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxonomyNodePropertyPossibleValuesInner) GetScaleIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScaleId.Get(), o.ScaleId.IsSet()
}

// HasScaleId returns a boolean if a field has been set.
func (o *TaxonomyNodePropertyPossibleValuesInner) HasScaleId() bool {
	if o != nil && o.ScaleId.IsSet() {
		return true
	}

	return false
}

// SetScaleId gets a reference to the given NullableInt32 and assigns it to the ScaleId field.
func (o *TaxonomyNodePropertyPossibleValuesInner) SetScaleId(v int32) {
	o.ScaleId.Set(&v)
}
// SetScaleIdNil sets the value for ScaleId to be an explicit nil
func (o *TaxonomyNodePropertyPossibleValuesInner) SetScaleIdNil() {
	o.ScaleId.Set(nil)
}

// UnsetScaleId ensures that no value is present for ScaleId, not even an explicit nil
func (o *TaxonomyNodePropertyPossibleValuesInner) UnsetScaleId() {
	o.ScaleId.Unset()
}

// GetEqualTo returns the EqualTo field value if set, zero value otherwise.
func (o *TaxonomyNodePropertyPossibleValuesInner) GetEqualTo() []int32 {
	if o == nil || IsNil(o.EqualTo) {
		var ret []int32
		return ret
	}
	return o.EqualTo
}

// GetEqualToOk returns a tuple with the EqualTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxonomyNodePropertyPossibleValuesInner) GetEqualToOk() ([]int32, bool) {
	if o == nil || IsNil(o.EqualTo) {
		return nil, false
	}
	return o.EqualTo, true
}

// HasEqualTo returns a boolean if a field has been set.
func (o *TaxonomyNodePropertyPossibleValuesInner) HasEqualTo() bool {
	if o != nil && !IsNil(o.EqualTo) {
		return true
	}

	return false
}

// SetEqualTo gets a reference to the given []int32 and assigns it to the EqualTo field.
func (o *TaxonomyNodePropertyPossibleValuesInner) SetEqualTo(v []int32) {
	o.EqualTo = v
}

func (o TaxonomyNodePropertyPossibleValuesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxonomyNodePropertyPossibleValuesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ValueId.IsSet() {
		toSerialize["value_id"] = o.ValueId.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.ScaleId.IsSet() {
		toSerialize["scale_id"] = o.ScaleId.Get()
	}
	if !IsNil(o.EqualTo) {
		toSerialize["equal_to"] = o.EqualTo
	}
	return toSerialize, nil
}

type NullableTaxonomyNodePropertyPossibleValuesInner struct {
	value *TaxonomyNodePropertyPossibleValuesInner
	isSet bool
}

func (v NullableTaxonomyNodePropertyPossibleValuesInner) Get() *TaxonomyNodePropertyPossibleValuesInner {
	return v.value
}

func (v *NullableTaxonomyNodePropertyPossibleValuesInner) Set(val *TaxonomyNodePropertyPossibleValuesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxonomyNodePropertyPossibleValuesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxonomyNodePropertyPossibleValuesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxonomyNodePropertyPossibleValuesInner(val *TaxonomyNodePropertyPossibleValuesInner) *NullableTaxonomyNodePropertyPossibleValuesInner {
	return &NullableTaxonomyNodePropertyPossibleValuesInner{value: val, isSet: true}
}

func (v NullableTaxonomyNodePropertyPossibleValuesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxonomyNodePropertyPossibleValuesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


