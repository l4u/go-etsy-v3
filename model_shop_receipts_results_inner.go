/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ShopReceiptsResultsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShopReceiptsResultsInner{}

// ShopReceiptsResultsInner List of Shop Receipt resources found, with all Shop Receipt fields for each resource.
type ShopReceiptsResultsInner struct {
	// The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
	ReceiptId *int32 `json:"receipt_id,omitempty"`
	// The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
	ReceiptType *int32 `json:"receipt_type,omitempty"`
	// The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
	SellerUserId *int32 `json:"seller_user_id,omitempty"`
	// The email address string for the seller of the listing.
	SellerEmail NullableString `json:"seller_email,omitempty"`
	// The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
	BuyerUserId *int32 `json:"buyer_user_id,omitempty"`
	// The email address string for the buyer of the listing.
	BuyerEmail NullableString `json:"buyer_email,omitempty"`
	// The name string for the recipient in the shipping address.
	Name *string `json:"name,omitempty"`
	// The first address line string for the recipient in the shipping address.
	FirstLine *string `json:"first_line,omitempty"`
	// The optional second address line string for the recipient in the shipping address.
	SecondLine NullableString `json:"second_line,omitempty"`
	// The city string for the recipient in the shipping address.
	City *string `json:"city,omitempty"`
	// The state string for the recipient in the shipping address.
	State NullableString `json:"state,omitempty"`
	// The zip code string (not necessarily a number) for the recipient in the shipping address.
	Zip *string `json:"zip,omitempty"`
	// The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
	Status *string `json:"status,omitempty"`
	// The formatted shipping address string for the recipient in the shipping address.
	FormattedAddress *string `json:"formatted_address,omitempty"`
	// The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
	CountryIso *string `json:"country_iso,omitempty"`
	// The payment method string identifying purchaser's payment method, which must be one of: \\'cc\\' (credit card), \\'paypal\\', \\'check\\', \\'mo\\' (money order), \\'bt\\' (bank transfer), \\'other\\', \\'ideal\\', \\'sofort\\', \\'apple_pay\\', \\'google\\', \\'android_pay\\', \\'google_pay\\', \\'klarna\\', \\'k_pay_in_4\\' (klarna), \\'k_pay_in_3\\' (klarna), or \\'k_financing\\' (klarna).
	PaymentMethod *string `json:"payment_method,omitempty"`
	// The email address string for the email address to which to send payment confirmation
	PaymentEmail *string `json:"payment_email,omitempty"`
	// An optional message string from the seller.
	MessageFromSeller NullableString `json:"message_from_seller,omitempty"`
	// An optional message string from the buyer.
	MessageFromBuyer NullableString `json:"message_from_buyer,omitempty"`
	// The machine-generated acknowledgement string from the payment system.
	MessageFromPayment NullableString `json:"message_from_payment,omitempty"`
	// When true, buyer paid for this purchase.
	IsPaid *bool `json:"is_paid,omitempty"`
	// When true, seller shipped the products.
	IsShipped *bool `json:"is_shipped,omitempty"`
	// The receipt\\'s creation time, in epoch seconds.
	CreateTimestamp *int32 `json:"create_timestamp,omitempty"`
	// The receipt\\'s creation time, in epoch seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The time of the last update to the receipt, in epoch seconds.
	UpdateTimestamp *int32 `json:"update_timestamp,omitempty"`
	// The time of the last update to the receipt, in epoch seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
	// When true, the buyer indicated this purchase is a gift.
	IsGift *bool `json:"is_gift,omitempty"`
	// A gift message string the buyer requests delivered with the product.
	GiftMessage *string `json:"gift_message,omitempty"`
	Grandtotal *ShopReceiptGrandtotal `json:"grandtotal,omitempty"`
	Subtotal *ShopReceiptSubtotal `json:"subtotal,omitempty"`
	TotalPrice *ShopReceiptTotalPrice `json:"total_price,omitempty"`
	TotalShippingCost *ShopReceiptTotalShippingCost `json:"total_shipping_cost,omitempty"`
	TotalTaxCost *ShopReceiptTotalTaxCost `json:"total_tax_cost,omitempty"`
	TotalVatCost *ShopReceiptTotalVatCost `json:"total_vat_cost,omitempty"`
	DiscountAmt *ShopReceiptDiscountAmt `json:"discount_amt,omitempty"`
	GiftWrapPrice *ShopReceiptGiftWrapPrice `json:"gift_wrap_price,omitempty"`
	// A list of shipment statements for this receipt.
	Shipments []ShopReceiptShipmentsInner `json:"shipments,omitempty"`
	// Array of transactions for the receipt.
	Transactions []ShopReceiptTransactionsInner `json:"transactions,omitempty"`
	// Refunds for a given receipt.
	Refunds []ShopReceiptRefundsInner `json:"refunds,omitempty"`
}

// NewShopReceiptsResultsInner instantiates a new ShopReceiptsResultsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopReceiptsResultsInner() *ShopReceiptsResultsInner {
	this := ShopReceiptsResultsInner{}
	return &this
}

// NewShopReceiptsResultsInnerWithDefaults instantiates a new ShopReceiptsResultsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopReceiptsResultsInnerWithDefaults() *ShopReceiptsResultsInner {
	this := ShopReceiptsResultsInner{}
	return &this
}

// GetReceiptId returns the ReceiptId field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetReceiptId() int32 {
	if o == nil || IsNil(o.ReceiptId) {
		var ret int32
		return ret
	}
	return *o.ReceiptId
}

// GetReceiptIdOk returns a tuple with the ReceiptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetReceiptIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ReceiptId) {
		return nil, false
	}
	return o.ReceiptId, true
}

// HasReceiptId returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasReceiptId() bool {
	if o != nil && !IsNil(o.ReceiptId) {
		return true
	}

	return false
}

// SetReceiptId gets a reference to the given int32 and assigns it to the ReceiptId field.
func (o *ShopReceiptsResultsInner) SetReceiptId(v int32) {
	o.ReceiptId = &v
}

// GetReceiptType returns the ReceiptType field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetReceiptType() int32 {
	if o == nil || IsNil(o.ReceiptType) {
		var ret int32
		return ret
	}
	return *o.ReceiptType
}

// GetReceiptTypeOk returns a tuple with the ReceiptType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetReceiptTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.ReceiptType) {
		return nil, false
	}
	return o.ReceiptType, true
}

// HasReceiptType returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasReceiptType() bool {
	if o != nil && !IsNil(o.ReceiptType) {
		return true
	}

	return false
}

// SetReceiptType gets a reference to the given int32 and assigns it to the ReceiptType field.
func (o *ShopReceiptsResultsInner) SetReceiptType(v int32) {
	o.ReceiptType = &v
}

// GetSellerUserId returns the SellerUserId field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetSellerUserId() int32 {
	if o == nil || IsNil(o.SellerUserId) {
		var ret int32
		return ret
	}
	return *o.SellerUserId
}

// GetSellerUserIdOk returns a tuple with the SellerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetSellerUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SellerUserId) {
		return nil, false
	}
	return o.SellerUserId, true
}

// HasSellerUserId returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasSellerUserId() bool {
	if o != nil && !IsNil(o.SellerUserId) {
		return true
	}

	return false
}

// SetSellerUserId gets a reference to the given int32 and assigns it to the SellerUserId field.
func (o *ShopReceiptsResultsInner) SetSellerUserId(v int32) {
	o.SellerUserId = &v
}

// GetSellerEmail returns the SellerEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopReceiptsResultsInner) GetSellerEmail() string {
	if o == nil || IsNil(o.SellerEmail.Get()) {
		var ret string
		return ret
	}
	return *o.SellerEmail.Get()
}

// GetSellerEmailOk returns a tuple with the SellerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopReceiptsResultsInner) GetSellerEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellerEmail.Get(), o.SellerEmail.IsSet()
}

// HasSellerEmail returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasSellerEmail() bool {
	if o != nil && o.SellerEmail.IsSet() {
		return true
	}

	return false
}

// SetSellerEmail gets a reference to the given NullableString and assigns it to the SellerEmail field.
func (o *ShopReceiptsResultsInner) SetSellerEmail(v string) {
	o.SellerEmail.Set(&v)
}
// SetSellerEmailNil sets the value for SellerEmail to be an explicit nil
func (o *ShopReceiptsResultsInner) SetSellerEmailNil() {
	o.SellerEmail.Set(nil)
}

// UnsetSellerEmail ensures that no value is present for SellerEmail, not even an explicit nil
func (o *ShopReceiptsResultsInner) UnsetSellerEmail() {
	o.SellerEmail.Unset()
}

// GetBuyerUserId returns the BuyerUserId field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetBuyerUserId() int32 {
	if o == nil || IsNil(o.BuyerUserId) {
		var ret int32
		return ret
	}
	return *o.BuyerUserId
}

// GetBuyerUserIdOk returns a tuple with the BuyerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetBuyerUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.BuyerUserId) {
		return nil, false
	}
	return o.BuyerUserId, true
}

// HasBuyerUserId returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasBuyerUserId() bool {
	if o != nil && !IsNil(o.BuyerUserId) {
		return true
	}

	return false
}

// SetBuyerUserId gets a reference to the given int32 and assigns it to the BuyerUserId field.
func (o *ShopReceiptsResultsInner) SetBuyerUserId(v int32) {
	o.BuyerUserId = &v
}

// GetBuyerEmail returns the BuyerEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopReceiptsResultsInner) GetBuyerEmail() string {
	if o == nil || IsNil(o.BuyerEmail.Get()) {
		var ret string
		return ret
	}
	return *o.BuyerEmail.Get()
}

// GetBuyerEmailOk returns a tuple with the BuyerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopReceiptsResultsInner) GetBuyerEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuyerEmail.Get(), o.BuyerEmail.IsSet()
}

// HasBuyerEmail returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasBuyerEmail() bool {
	if o != nil && o.BuyerEmail.IsSet() {
		return true
	}

	return false
}

// SetBuyerEmail gets a reference to the given NullableString and assigns it to the BuyerEmail field.
func (o *ShopReceiptsResultsInner) SetBuyerEmail(v string) {
	o.BuyerEmail.Set(&v)
}
// SetBuyerEmailNil sets the value for BuyerEmail to be an explicit nil
func (o *ShopReceiptsResultsInner) SetBuyerEmailNil() {
	o.BuyerEmail.Set(nil)
}

// UnsetBuyerEmail ensures that no value is present for BuyerEmail, not even an explicit nil
func (o *ShopReceiptsResultsInner) UnsetBuyerEmail() {
	o.BuyerEmail.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ShopReceiptsResultsInner) SetName(v string) {
	o.Name = &v
}

// GetFirstLine returns the FirstLine field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetFirstLine() string {
	if o == nil || IsNil(o.FirstLine) {
		var ret string
		return ret
	}
	return *o.FirstLine
}

// GetFirstLineOk returns a tuple with the FirstLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetFirstLineOk() (*string, bool) {
	if o == nil || IsNil(o.FirstLine) {
		return nil, false
	}
	return o.FirstLine, true
}

// HasFirstLine returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasFirstLine() bool {
	if o != nil && !IsNil(o.FirstLine) {
		return true
	}

	return false
}

// SetFirstLine gets a reference to the given string and assigns it to the FirstLine field.
func (o *ShopReceiptsResultsInner) SetFirstLine(v string) {
	o.FirstLine = &v
}

// GetSecondLine returns the SecondLine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopReceiptsResultsInner) GetSecondLine() string {
	if o == nil || IsNil(o.SecondLine.Get()) {
		var ret string
		return ret
	}
	return *o.SecondLine.Get()
}

// GetSecondLineOk returns a tuple with the SecondLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopReceiptsResultsInner) GetSecondLineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecondLine.Get(), o.SecondLine.IsSet()
}

// HasSecondLine returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasSecondLine() bool {
	if o != nil && o.SecondLine.IsSet() {
		return true
	}

	return false
}

// SetSecondLine gets a reference to the given NullableString and assigns it to the SecondLine field.
func (o *ShopReceiptsResultsInner) SetSecondLine(v string) {
	o.SecondLine.Set(&v)
}
// SetSecondLineNil sets the value for SecondLine to be an explicit nil
func (o *ShopReceiptsResultsInner) SetSecondLineNil() {
	o.SecondLine.Set(nil)
}

// UnsetSecondLine ensures that no value is present for SecondLine, not even an explicit nil
func (o *ShopReceiptsResultsInner) UnsetSecondLine() {
	o.SecondLine.Unset()
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *ShopReceiptsResultsInner) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopReceiptsResultsInner) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopReceiptsResultsInner) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *ShopReceiptsResultsInner) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *ShopReceiptsResultsInner) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *ShopReceiptsResultsInner) UnsetState() {
	o.State.Unset()
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetZip() string {
	if o == nil || IsNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetZipOk() (*string, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *ShopReceiptsResultsInner) SetZip(v string) {
	o.Zip = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ShopReceiptsResultsInner) SetStatus(v string) {
	o.Status = &v
}

// GetFormattedAddress returns the FormattedAddress field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetFormattedAddress() string {
	if o == nil || IsNil(o.FormattedAddress) {
		var ret string
		return ret
	}
	return *o.FormattedAddress
}

// GetFormattedAddressOk returns a tuple with the FormattedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetFormattedAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FormattedAddress) {
		return nil, false
	}
	return o.FormattedAddress, true
}

// HasFormattedAddress returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasFormattedAddress() bool {
	if o != nil && !IsNil(o.FormattedAddress) {
		return true
	}

	return false
}

// SetFormattedAddress gets a reference to the given string and assigns it to the FormattedAddress field.
func (o *ShopReceiptsResultsInner) SetFormattedAddress(v string) {
	o.FormattedAddress = &v
}

// GetCountryIso returns the CountryIso field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetCountryIso() string {
	if o == nil || IsNil(o.CountryIso) {
		var ret string
		return ret
	}
	return *o.CountryIso
}

// GetCountryIsoOk returns a tuple with the CountryIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetCountryIsoOk() (*string, bool) {
	if o == nil || IsNil(o.CountryIso) {
		return nil, false
	}
	return o.CountryIso, true
}

// HasCountryIso returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasCountryIso() bool {
	if o != nil && !IsNil(o.CountryIso) {
		return true
	}

	return false
}

// SetCountryIso gets a reference to the given string and assigns it to the CountryIso field.
func (o *ShopReceiptsResultsInner) SetCountryIso(v string) {
	o.CountryIso = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetPaymentMethod() string {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret string
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetPaymentMethodOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given string and assigns it to the PaymentMethod field.
func (o *ShopReceiptsResultsInner) SetPaymentMethod(v string) {
	o.PaymentMethod = &v
}

// GetPaymentEmail returns the PaymentEmail field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetPaymentEmail() string {
	if o == nil || IsNil(o.PaymentEmail) {
		var ret string
		return ret
	}
	return *o.PaymentEmail
}

// GetPaymentEmailOk returns a tuple with the PaymentEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetPaymentEmailOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentEmail) {
		return nil, false
	}
	return o.PaymentEmail, true
}

// HasPaymentEmail returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasPaymentEmail() bool {
	if o != nil && !IsNil(o.PaymentEmail) {
		return true
	}

	return false
}

// SetPaymentEmail gets a reference to the given string and assigns it to the PaymentEmail field.
func (o *ShopReceiptsResultsInner) SetPaymentEmail(v string) {
	o.PaymentEmail = &v
}

// GetMessageFromSeller returns the MessageFromSeller field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopReceiptsResultsInner) GetMessageFromSeller() string {
	if o == nil || IsNil(o.MessageFromSeller.Get()) {
		var ret string
		return ret
	}
	return *o.MessageFromSeller.Get()
}

// GetMessageFromSellerOk returns a tuple with the MessageFromSeller field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopReceiptsResultsInner) GetMessageFromSellerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageFromSeller.Get(), o.MessageFromSeller.IsSet()
}

// HasMessageFromSeller returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasMessageFromSeller() bool {
	if o != nil && o.MessageFromSeller.IsSet() {
		return true
	}

	return false
}

// SetMessageFromSeller gets a reference to the given NullableString and assigns it to the MessageFromSeller field.
func (o *ShopReceiptsResultsInner) SetMessageFromSeller(v string) {
	o.MessageFromSeller.Set(&v)
}
// SetMessageFromSellerNil sets the value for MessageFromSeller to be an explicit nil
func (o *ShopReceiptsResultsInner) SetMessageFromSellerNil() {
	o.MessageFromSeller.Set(nil)
}

// UnsetMessageFromSeller ensures that no value is present for MessageFromSeller, not even an explicit nil
func (o *ShopReceiptsResultsInner) UnsetMessageFromSeller() {
	o.MessageFromSeller.Unset()
}

// GetMessageFromBuyer returns the MessageFromBuyer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopReceiptsResultsInner) GetMessageFromBuyer() string {
	if o == nil || IsNil(o.MessageFromBuyer.Get()) {
		var ret string
		return ret
	}
	return *o.MessageFromBuyer.Get()
}

// GetMessageFromBuyerOk returns a tuple with the MessageFromBuyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopReceiptsResultsInner) GetMessageFromBuyerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageFromBuyer.Get(), o.MessageFromBuyer.IsSet()
}

// HasMessageFromBuyer returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasMessageFromBuyer() bool {
	if o != nil && o.MessageFromBuyer.IsSet() {
		return true
	}

	return false
}

// SetMessageFromBuyer gets a reference to the given NullableString and assigns it to the MessageFromBuyer field.
func (o *ShopReceiptsResultsInner) SetMessageFromBuyer(v string) {
	o.MessageFromBuyer.Set(&v)
}
// SetMessageFromBuyerNil sets the value for MessageFromBuyer to be an explicit nil
func (o *ShopReceiptsResultsInner) SetMessageFromBuyerNil() {
	o.MessageFromBuyer.Set(nil)
}

// UnsetMessageFromBuyer ensures that no value is present for MessageFromBuyer, not even an explicit nil
func (o *ShopReceiptsResultsInner) UnsetMessageFromBuyer() {
	o.MessageFromBuyer.Unset()
}

// GetMessageFromPayment returns the MessageFromPayment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopReceiptsResultsInner) GetMessageFromPayment() string {
	if o == nil || IsNil(o.MessageFromPayment.Get()) {
		var ret string
		return ret
	}
	return *o.MessageFromPayment.Get()
}

// GetMessageFromPaymentOk returns a tuple with the MessageFromPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopReceiptsResultsInner) GetMessageFromPaymentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageFromPayment.Get(), o.MessageFromPayment.IsSet()
}

// HasMessageFromPayment returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasMessageFromPayment() bool {
	if o != nil && o.MessageFromPayment.IsSet() {
		return true
	}

	return false
}

// SetMessageFromPayment gets a reference to the given NullableString and assigns it to the MessageFromPayment field.
func (o *ShopReceiptsResultsInner) SetMessageFromPayment(v string) {
	o.MessageFromPayment.Set(&v)
}
// SetMessageFromPaymentNil sets the value for MessageFromPayment to be an explicit nil
func (o *ShopReceiptsResultsInner) SetMessageFromPaymentNil() {
	o.MessageFromPayment.Set(nil)
}

// UnsetMessageFromPayment ensures that no value is present for MessageFromPayment, not even an explicit nil
func (o *ShopReceiptsResultsInner) UnsetMessageFromPayment() {
	o.MessageFromPayment.Unset()
}

// GetIsPaid returns the IsPaid field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetIsPaid() bool {
	if o == nil || IsNil(o.IsPaid) {
		var ret bool
		return ret
	}
	return *o.IsPaid
}

// GetIsPaidOk returns a tuple with the IsPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetIsPaidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaid) {
		return nil, false
	}
	return o.IsPaid, true
}

// HasIsPaid returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasIsPaid() bool {
	if o != nil && !IsNil(o.IsPaid) {
		return true
	}

	return false
}

// SetIsPaid gets a reference to the given bool and assigns it to the IsPaid field.
func (o *ShopReceiptsResultsInner) SetIsPaid(v bool) {
	o.IsPaid = &v
}

// GetIsShipped returns the IsShipped field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetIsShipped() bool {
	if o == nil || IsNil(o.IsShipped) {
		var ret bool
		return ret
	}
	return *o.IsShipped
}

// GetIsShippedOk returns a tuple with the IsShipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetIsShippedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsShipped) {
		return nil, false
	}
	return o.IsShipped, true
}

// HasIsShipped returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasIsShipped() bool {
	if o != nil && !IsNil(o.IsShipped) {
		return true
	}

	return false
}

// SetIsShipped gets a reference to the given bool and assigns it to the IsShipped field.
func (o *ShopReceiptsResultsInner) SetIsShipped(v bool) {
	o.IsShipped = &v
}

// GetCreateTimestamp returns the CreateTimestamp field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetCreateTimestamp() int32 {
	if o == nil || IsNil(o.CreateTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreateTimestamp
}

// GetCreateTimestampOk returns a tuple with the CreateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetCreateTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreateTimestamp) {
		return nil, false
	}
	return o.CreateTimestamp, true
}

// HasCreateTimestamp returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasCreateTimestamp() bool {
	if o != nil && !IsNil(o.CreateTimestamp) {
		return true
	}

	return false
}

// SetCreateTimestamp gets a reference to the given int32 and assigns it to the CreateTimestamp field.
func (o *ShopReceiptsResultsInner) SetCreateTimestamp(v int32) {
	o.CreateTimestamp = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *ShopReceiptsResultsInner) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdateTimestamp returns the UpdateTimestamp field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetUpdateTimestamp() int32 {
	if o == nil || IsNil(o.UpdateTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdateTimestamp
}

// GetUpdateTimestampOk returns a tuple with the UpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetUpdateTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdateTimestamp) {
		return nil, false
	}
	return o.UpdateTimestamp, true
}

// HasUpdateTimestamp returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasUpdateTimestamp() bool {
	if o != nil && !IsNil(o.UpdateTimestamp) {
		return true
	}

	return false
}

// SetUpdateTimestamp gets a reference to the given int32 and assigns it to the UpdateTimestamp field.
func (o *ShopReceiptsResultsInner) SetUpdateTimestamp(v int32) {
	o.UpdateTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *ShopReceiptsResultsInner) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

// GetIsGift returns the IsGift field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetIsGift() bool {
	if o == nil || IsNil(o.IsGift) {
		var ret bool
		return ret
	}
	return *o.IsGift
}

// GetIsGiftOk returns a tuple with the IsGift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetIsGiftOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGift) {
		return nil, false
	}
	return o.IsGift, true
}

// HasIsGift returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasIsGift() bool {
	if o != nil && !IsNil(o.IsGift) {
		return true
	}

	return false
}

// SetIsGift gets a reference to the given bool and assigns it to the IsGift field.
func (o *ShopReceiptsResultsInner) SetIsGift(v bool) {
	o.IsGift = &v
}

// GetGiftMessage returns the GiftMessage field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetGiftMessage() string {
	if o == nil || IsNil(o.GiftMessage) {
		var ret string
		return ret
	}
	return *o.GiftMessage
}

// GetGiftMessageOk returns a tuple with the GiftMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetGiftMessageOk() (*string, bool) {
	if o == nil || IsNil(o.GiftMessage) {
		return nil, false
	}
	return o.GiftMessage, true
}

// HasGiftMessage returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasGiftMessage() bool {
	if o != nil && !IsNil(o.GiftMessage) {
		return true
	}

	return false
}

// SetGiftMessage gets a reference to the given string and assigns it to the GiftMessage field.
func (o *ShopReceiptsResultsInner) SetGiftMessage(v string) {
	o.GiftMessage = &v
}

// GetGrandtotal returns the Grandtotal field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetGrandtotal() ShopReceiptGrandtotal {
	if o == nil || IsNil(o.Grandtotal) {
		var ret ShopReceiptGrandtotal
		return ret
	}
	return *o.Grandtotal
}

// GetGrandtotalOk returns a tuple with the Grandtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetGrandtotalOk() (*ShopReceiptGrandtotal, bool) {
	if o == nil || IsNil(o.Grandtotal) {
		return nil, false
	}
	return o.Grandtotal, true
}

// HasGrandtotal returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasGrandtotal() bool {
	if o != nil && !IsNil(o.Grandtotal) {
		return true
	}

	return false
}

// SetGrandtotal gets a reference to the given ShopReceiptGrandtotal and assigns it to the Grandtotal field.
func (o *ShopReceiptsResultsInner) SetGrandtotal(v ShopReceiptGrandtotal) {
	o.Grandtotal = &v
}

// GetSubtotal returns the Subtotal field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetSubtotal() ShopReceiptSubtotal {
	if o == nil || IsNil(o.Subtotal) {
		var ret ShopReceiptSubtotal
		return ret
	}
	return *o.Subtotal
}

// GetSubtotalOk returns a tuple with the Subtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetSubtotalOk() (*ShopReceiptSubtotal, bool) {
	if o == nil || IsNil(o.Subtotal) {
		return nil, false
	}
	return o.Subtotal, true
}

// HasSubtotal returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasSubtotal() bool {
	if o != nil && !IsNil(o.Subtotal) {
		return true
	}

	return false
}

// SetSubtotal gets a reference to the given ShopReceiptSubtotal and assigns it to the Subtotal field.
func (o *ShopReceiptsResultsInner) SetSubtotal(v ShopReceiptSubtotal) {
	o.Subtotal = &v
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetTotalPrice() ShopReceiptTotalPrice {
	if o == nil || IsNil(o.TotalPrice) {
		var ret ShopReceiptTotalPrice
		return ret
	}
	return *o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetTotalPriceOk() (*ShopReceiptTotalPrice, bool) {
	if o == nil || IsNil(o.TotalPrice) {
		return nil, false
	}
	return o.TotalPrice, true
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasTotalPrice() bool {
	if o != nil && !IsNil(o.TotalPrice) {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given ShopReceiptTotalPrice and assigns it to the TotalPrice field.
func (o *ShopReceiptsResultsInner) SetTotalPrice(v ShopReceiptTotalPrice) {
	o.TotalPrice = &v
}

// GetTotalShippingCost returns the TotalShippingCost field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetTotalShippingCost() ShopReceiptTotalShippingCost {
	if o == nil || IsNil(o.TotalShippingCost) {
		var ret ShopReceiptTotalShippingCost
		return ret
	}
	return *o.TotalShippingCost
}

// GetTotalShippingCostOk returns a tuple with the TotalShippingCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetTotalShippingCostOk() (*ShopReceiptTotalShippingCost, bool) {
	if o == nil || IsNil(o.TotalShippingCost) {
		return nil, false
	}
	return o.TotalShippingCost, true
}

// HasTotalShippingCost returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasTotalShippingCost() bool {
	if o != nil && !IsNil(o.TotalShippingCost) {
		return true
	}

	return false
}

// SetTotalShippingCost gets a reference to the given ShopReceiptTotalShippingCost and assigns it to the TotalShippingCost field.
func (o *ShopReceiptsResultsInner) SetTotalShippingCost(v ShopReceiptTotalShippingCost) {
	o.TotalShippingCost = &v
}

// GetTotalTaxCost returns the TotalTaxCost field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetTotalTaxCost() ShopReceiptTotalTaxCost {
	if o == nil || IsNil(o.TotalTaxCost) {
		var ret ShopReceiptTotalTaxCost
		return ret
	}
	return *o.TotalTaxCost
}

// GetTotalTaxCostOk returns a tuple with the TotalTaxCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetTotalTaxCostOk() (*ShopReceiptTotalTaxCost, bool) {
	if o == nil || IsNil(o.TotalTaxCost) {
		return nil, false
	}
	return o.TotalTaxCost, true
}

// HasTotalTaxCost returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasTotalTaxCost() bool {
	if o != nil && !IsNil(o.TotalTaxCost) {
		return true
	}

	return false
}

// SetTotalTaxCost gets a reference to the given ShopReceiptTotalTaxCost and assigns it to the TotalTaxCost field.
func (o *ShopReceiptsResultsInner) SetTotalTaxCost(v ShopReceiptTotalTaxCost) {
	o.TotalTaxCost = &v
}

// GetTotalVatCost returns the TotalVatCost field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetTotalVatCost() ShopReceiptTotalVatCost {
	if o == nil || IsNil(o.TotalVatCost) {
		var ret ShopReceiptTotalVatCost
		return ret
	}
	return *o.TotalVatCost
}

// GetTotalVatCostOk returns a tuple with the TotalVatCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetTotalVatCostOk() (*ShopReceiptTotalVatCost, bool) {
	if o == nil || IsNil(o.TotalVatCost) {
		return nil, false
	}
	return o.TotalVatCost, true
}

// HasTotalVatCost returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasTotalVatCost() bool {
	if o != nil && !IsNil(o.TotalVatCost) {
		return true
	}

	return false
}

// SetTotalVatCost gets a reference to the given ShopReceiptTotalVatCost and assigns it to the TotalVatCost field.
func (o *ShopReceiptsResultsInner) SetTotalVatCost(v ShopReceiptTotalVatCost) {
	o.TotalVatCost = &v
}

// GetDiscountAmt returns the DiscountAmt field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetDiscountAmt() ShopReceiptDiscountAmt {
	if o == nil || IsNil(o.DiscountAmt) {
		var ret ShopReceiptDiscountAmt
		return ret
	}
	return *o.DiscountAmt
}

// GetDiscountAmtOk returns a tuple with the DiscountAmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetDiscountAmtOk() (*ShopReceiptDiscountAmt, bool) {
	if o == nil || IsNil(o.DiscountAmt) {
		return nil, false
	}
	return o.DiscountAmt, true
}

// HasDiscountAmt returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasDiscountAmt() bool {
	if o != nil && !IsNil(o.DiscountAmt) {
		return true
	}

	return false
}

// SetDiscountAmt gets a reference to the given ShopReceiptDiscountAmt and assigns it to the DiscountAmt field.
func (o *ShopReceiptsResultsInner) SetDiscountAmt(v ShopReceiptDiscountAmt) {
	o.DiscountAmt = &v
}

// GetGiftWrapPrice returns the GiftWrapPrice field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetGiftWrapPrice() ShopReceiptGiftWrapPrice {
	if o == nil || IsNil(o.GiftWrapPrice) {
		var ret ShopReceiptGiftWrapPrice
		return ret
	}
	return *o.GiftWrapPrice
}

// GetGiftWrapPriceOk returns a tuple with the GiftWrapPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetGiftWrapPriceOk() (*ShopReceiptGiftWrapPrice, bool) {
	if o == nil || IsNil(o.GiftWrapPrice) {
		return nil, false
	}
	return o.GiftWrapPrice, true
}

// HasGiftWrapPrice returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasGiftWrapPrice() bool {
	if o != nil && !IsNil(o.GiftWrapPrice) {
		return true
	}

	return false
}

// SetGiftWrapPrice gets a reference to the given ShopReceiptGiftWrapPrice and assigns it to the GiftWrapPrice field.
func (o *ShopReceiptsResultsInner) SetGiftWrapPrice(v ShopReceiptGiftWrapPrice) {
	o.GiftWrapPrice = &v
}

// GetShipments returns the Shipments field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetShipments() []ShopReceiptShipmentsInner {
	if o == nil || IsNil(o.Shipments) {
		var ret []ShopReceiptShipmentsInner
		return ret
	}
	return o.Shipments
}

// GetShipmentsOk returns a tuple with the Shipments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetShipmentsOk() ([]ShopReceiptShipmentsInner, bool) {
	if o == nil || IsNil(o.Shipments) {
		return nil, false
	}
	return o.Shipments, true
}

// HasShipments returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasShipments() bool {
	if o != nil && !IsNil(o.Shipments) {
		return true
	}

	return false
}

// SetShipments gets a reference to the given []ShopReceiptShipmentsInner and assigns it to the Shipments field.
func (o *ShopReceiptsResultsInner) SetShipments(v []ShopReceiptShipmentsInner) {
	o.Shipments = v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetTransactions() []ShopReceiptTransactionsInner {
	if o == nil || IsNil(o.Transactions) {
		var ret []ShopReceiptTransactionsInner
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetTransactionsOk() ([]ShopReceiptTransactionsInner, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []ShopReceiptTransactionsInner and assigns it to the Transactions field.
func (o *ShopReceiptsResultsInner) SetTransactions(v []ShopReceiptTransactionsInner) {
	o.Transactions = v
}

// GetRefunds returns the Refunds field value if set, zero value otherwise.
func (o *ShopReceiptsResultsInner) GetRefunds() []ShopReceiptRefundsInner {
	if o == nil || IsNil(o.Refunds) {
		var ret []ShopReceiptRefundsInner
		return ret
	}
	return o.Refunds
}

// GetRefundsOk returns a tuple with the Refunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopReceiptsResultsInner) GetRefundsOk() ([]ShopReceiptRefundsInner, bool) {
	if o == nil || IsNil(o.Refunds) {
		return nil, false
	}
	return o.Refunds, true
}

// HasRefunds returns a boolean if a field has been set.
func (o *ShopReceiptsResultsInner) HasRefunds() bool {
	if o != nil && !IsNil(o.Refunds) {
		return true
	}

	return false
}

// SetRefunds gets a reference to the given []ShopReceiptRefundsInner and assigns it to the Refunds field.
func (o *ShopReceiptsResultsInner) SetRefunds(v []ShopReceiptRefundsInner) {
	o.Refunds = v
}

func (o ShopReceiptsResultsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShopReceiptsResultsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReceiptId) {
		toSerialize["receipt_id"] = o.ReceiptId
	}
	if !IsNil(o.ReceiptType) {
		toSerialize["receipt_type"] = o.ReceiptType
	}
	if !IsNil(o.SellerUserId) {
		toSerialize["seller_user_id"] = o.SellerUserId
	}
	if o.SellerEmail.IsSet() {
		toSerialize["seller_email"] = o.SellerEmail.Get()
	}
	if !IsNil(o.BuyerUserId) {
		toSerialize["buyer_user_id"] = o.BuyerUserId
	}
	if o.BuyerEmail.IsSet() {
		toSerialize["buyer_email"] = o.BuyerEmail.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FirstLine) {
		toSerialize["first_line"] = o.FirstLine
	}
	if o.SecondLine.IsSet() {
		toSerialize["second_line"] = o.SecondLine.Get()
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.FormattedAddress) {
		toSerialize["formatted_address"] = o.FormattedAddress
	}
	if !IsNil(o.CountryIso) {
		toSerialize["country_iso"] = o.CountryIso
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["payment_method"] = o.PaymentMethod
	}
	if !IsNil(o.PaymentEmail) {
		toSerialize["payment_email"] = o.PaymentEmail
	}
	if o.MessageFromSeller.IsSet() {
		toSerialize["message_from_seller"] = o.MessageFromSeller.Get()
	}
	if o.MessageFromBuyer.IsSet() {
		toSerialize["message_from_buyer"] = o.MessageFromBuyer.Get()
	}
	if o.MessageFromPayment.IsSet() {
		toSerialize["message_from_payment"] = o.MessageFromPayment.Get()
	}
	if !IsNil(o.IsPaid) {
		toSerialize["is_paid"] = o.IsPaid
	}
	if !IsNil(o.IsShipped) {
		toSerialize["is_shipped"] = o.IsShipped
	}
	if !IsNil(o.CreateTimestamp) {
		toSerialize["create_timestamp"] = o.CreateTimestamp
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdateTimestamp) {
		toSerialize["update_timestamp"] = o.UpdateTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.IsGift) {
		toSerialize["is_gift"] = o.IsGift
	}
	if !IsNil(o.GiftMessage) {
		toSerialize["gift_message"] = o.GiftMessage
	}
	if !IsNil(o.Grandtotal) {
		toSerialize["grandtotal"] = o.Grandtotal
	}
	if !IsNil(o.Subtotal) {
		toSerialize["subtotal"] = o.Subtotal
	}
	if !IsNil(o.TotalPrice) {
		toSerialize["total_price"] = o.TotalPrice
	}
	if !IsNil(o.TotalShippingCost) {
		toSerialize["total_shipping_cost"] = o.TotalShippingCost
	}
	if !IsNil(o.TotalTaxCost) {
		toSerialize["total_tax_cost"] = o.TotalTaxCost
	}
	if !IsNil(o.TotalVatCost) {
		toSerialize["total_vat_cost"] = o.TotalVatCost
	}
	if !IsNil(o.DiscountAmt) {
		toSerialize["discount_amt"] = o.DiscountAmt
	}
	if !IsNil(o.GiftWrapPrice) {
		toSerialize["gift_wrap_price"] = o.GiftWrapPrice
	}
	if !IsNil(o.Shipments) {
		toSerialize["shipments"] = o.Shipments
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	if !IsNil(o.Refunds) {
		toSerialize["refunds"] = o.Refunds
	}
	return toSerialize, nil
}

type NullableShopReceiptsResultsInner struct {
	value *ShopReceiptsResultsInner
	isSet bool
}

func (v NullableShopReceiptsResultsInner) Get() *ShopReceiptsResultsInner {
	return v.value
}

func (v *NullableShopReceiptsResultsInner) Set(val *ShopReceiptsResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableShopReceiptsResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableShopReceiptsResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopReceiptsResultsInner(val *ShopReceiptsResultsInner) *NullableShopReceiptsResultsInner {
	return &NullableShopReceiptsResultsInner{value: val, isSet: true}
}

func (v NullableShopReceiptsResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopReceiptsResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


