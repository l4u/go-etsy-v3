/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListingTranslation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListingTranslation{}

// ListingTranslation Represents the translation data for a Listing.
type ListingTranslation struct {
	// The numeric ID for the Listing.
	ListingId *int32 `json:"listing_id,omitempty"`
	// The IETF language tag (e.g. 'fr') for the language of this translation.
	Language *string `json:"language,omitempty"`
	// The title of the Listing of this Translation.
	Title NullableString `json:"title,omitempty"`
	// The description of the Listing of this Translation.
	Description NullableString `json:"description,omitempty"`
	// The tags of the Listing of this Translation.
	Tags []string `json:"tags,omitempty"`
}

// NewListingTranslation instantiates a new ListingTranslation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListingTranslation() *ListingTranslation {
	this := ListingTranslation{}
	return &this
}

// NewListingTranslationWithDefaults instantiates a new ListingTranslation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListingTranslationWithDefaults() *ListingTranslation {
	this := ListingTranslation{}
	return &this
}

// GetListingId returns the ListingId field value if set, zero value otherwise.
func (o *ListingTranslation) GetListingId() int32 {
	if o == nil || IsNil(o.ListingId) {
		var ret int32
		return ret
	}
	return *o.ListingId
}

// GetListingIdOk returns a tuple with the ListingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingTranslation) GetListingIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ListingId) {
		return nil, false
	}
	return o.ListingId, true
}

// HasListingId returns a boolean if a field has been set.
func (o *ListingTranslation) HasListingId() bool {
	if o != nil && !IsNil(o.ListingId) {
		return true
	}

	return false
}

// SetListingId gets a reference to the given int32 and assigns it to the ListingId field.
func (o *ListingTranslation) SetListingId(v int32) {
	o.ListingId = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ListingTranslation) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingTranslation) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ListingTranslation) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ListingTranslation) SetLanguage(v string) {
	o.Language = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListingTranslation) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListingTranslation) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *ListingTranslation) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *ListingTranslation) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *ListingTranslation) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *ListingTranslation) UnsetTitle() {
	o.Title.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListingTranslation) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListingTranslation) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ListingTranslation) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ListingTranslation) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ListingTranslation) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ListingTranslation) UnsetDescription() {
	o.Description.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ListingTranslation) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingTranslation) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ListingTranslation) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ListingTranslation) SetTags(v []string) {
	o.Tags = v
}

func (o ListingTranslation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListingTranslation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ListingId) {
		toSerialize["listing_id"] = o.ListingId
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableListingTranslation struct {
	value *ListingTranslation
	isSet bool
}

func (v NullableListingTranslation) Get() *ListingTranslation {
	return v.value
}

func (v *NullableListingTranslation) Set(val *ListingTranslation) {
	v.value = val
	v.isSet = true
}

func (v NullableListingTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableListingTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListingTranslation(val *ListingTranslation) *NullableListingTranslation {
	return &NullableListingTranslation{value: val, isSet: true}
}

func (v NullableListingTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListingTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


