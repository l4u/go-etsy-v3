/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ShopProductionPartner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShopProductionPartner{}

// ShopProductionPartner Represents a description of a shop production partner.
type ShopProductionPartner struct {
	// The numeric ID of a production partner.
	ProductionPartnerId *int32 `json:"production_partner_id,omitempty"`
	// The name or title of the production partner.
	PartnerName *string `json:"partner_name,omitempty"`
	// A string representing the production partner location.
	Location *string `json:"location,omitempty"`
}

// NewShopProductionPartner instantiates a new ShopProductionPartner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopProductionPartner() *ShopProductionPartner {
	this := ShopProductionPartner{}
	return &this
}

// NewShopProductionPartnerWithDefaults instantiates a new ShopProductionPartner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopProductionPartnerWithDefaults() *ShopProductionPartner {
	this := ShopProductionPartner{}
	return &this
}

// GetProductionPartnerId returns the ProductionPartnerId field value if set, zero value otherwise.
func (o *ShopProductionPartner) GetProductionPartnerId() int32 {
	if o == nil || IsNil(o.ProductionPartnerId) {
		var ret int32
		return ret
	}
	return *o.ProductionPartnerId
}

// GetProductionPartnerIdOk returns a tuple with the ProductionPartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopProductionPartner) GetProductionPartnerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductionPartnerId) {
		return nil, false
	}
	return o.ProductionPartnerId, true
}

// HasProductionPartnerId returns a boolean if a field has been set.
func (o *ShopProductionPartner) HasProductionPartnerId() bool {
	if o != nil && !IsNil(o.ProductionPartnerId) {
		return true
	}

	return false
}

// SetProductionPartnerId gets a reference to the given int32 and assigns it to the ProductionPartnerId field.
func (o *ShopProductionPartner) SetProductionPartnerId(v int32) {
	o.ProductionPartnerId = &v
}

// GetPartnerName returns the PartnerName field value if set, zero value otherwise.
func (o *ShopProductionPartner) GetPartnerName() string {
	if o == nil || IsNil(o.PartnerName) {
		var ret string
		return ret
	}
	return *o.PartnerName
}

// GetPartnerNameOk returns a tuple with the PartnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopProductionPartner) GetPartnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerName) {
		return nil, false
	}
	return o.PartnerName, true
}

// HasPartnerName returns a boolean if a field has been set.
func (o *ShopProductionPartner) HasPartnerName() bool {
	if o != nil && !IsNil(o.PartnerName) {
		return true
	}

	return false
}

// SetPartnerName gets a reference to the given string and assigns it to the PartnerName field.
func (o *ShopProductionPartner) SetPartnerName(v string) {
	o.PartnerName = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ShopProductionPartner) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopProductionPartner) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ShopProductionPartner) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ShopProductionPartner) SetLocation(v string) {
	o.Location = &v
}

func (o ShopProductionPartner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShopProductionPartner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductionPartnerId) {
		toSerialize["production_partner_id"] = o.ProductionPartnerId
	}
	if !IsNil(o.PartnerName) {
		toSerialize["partner_name"] = o.PartnerName
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	return toSerialize, nil
}

type NullableShopProductionPartner struct {
	value *ShopProductionPartner
	isSet bool
}

func (v NullableShopProductionPartner) Get() *ShopProductionPartner {
	return v.value
}

func (v *NullableShopProductionPartner) Set(val *ShopProductionPartner) {
	v.value = val
	v.isSet = true
}

func (v NullableShopProductionPartner) IsSet() bool {
	return v.isSet
}

func (v *NullableShopProductionPartner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopProductionPartner(val *ShopProductionPartner) *NullableShopProductionPartner {
	return &NullableShopProductionPartner{value: val, isSet: true}
}

func (v NullableShopProductionPartner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopProductionPartner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


