/*
Etsy Open API v3

Testing ShopListingApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ShopListingApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ShopListingApiService CreateDraftListing", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32

		resp, httpRes, err := apiClient.ShopListingApi.CreateDraftListing(context.Background(), shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService DeleteListing", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listingId int32

		httpRes, err := apiClient.ShopListingApi.DeleteListing(context.Background(), listingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService DeleteListingProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32
		var listingId int32
		var propertyId int32

		httpRes, err := apiClient.ShopListingApi.DeleteListingProperty(context.Background(), shopId, listingId, propertyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService FindAllActiveListingsByShop", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32

		resp, httpRes, err := apiClient.ShopListingApi.FindAllActiveListingsByShop(context.Background(), shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService FindAllListingsActive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ShopListingApi.FindAllListingsActive(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetFeaturedListingsByShop", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32

		resp, httpRes, err := apiClient.ShopListingApi.GetFeaturedListingsByShop(context.Background(), shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetListing", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listingId int32

		resp, httpRes, err := apiClient.ShopListingApi.GetListing(context.Background(), listingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetListingProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32
		var listingId int32

		resp, httpRes, err := apiClient.ShopListingApi.GetListingProperties(context.Background(), shopId, listingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetListingProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listingId int32
		var propertyId int32

		resp, httpRes, err := apiClient.ShopListingApi.GetListingProperty(context.Background(), listingId, propertyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetListingsByListingIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ShopListingApi.GetListingsByListingIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetListingsByShop", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32

		resp, httpRes, err := apiClient.ShopListingApi.GetListingsByShop(context.Background(), shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetListingsByShopReceipt", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var receiptId int32
		var shopId int32

		resp, httpRes, err := apiClient.ShopListingApi.GetListingsByShopReceipt(context.Background(), receiptId, shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetListingsByShopReturnPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var returnPolicyId int32
		var shopId int32

		resp, httpRes, err := apiClient.ShopListingApi.GetListingsByShopReturnPolicy(context.Background(), returnPolicyId, shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService GetListingsByShopSectionId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32

		resp, httpRes, err := apiClient.ShopListingApi.GetListingsByShopSectionId(context.Background(), shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService UpdateListing", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32
		var listingId int32

		resp, httpRes, err := apiClient.ShopListingApi.UpdateListing(context.Background(), shopId, listingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService UpdateListingDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32
		var listingId int32

		resp, httpRes, err := apiClient.ShopListingApi.UpdateListingDeprecated(context.Background(), shopId, listingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopListingApiService UpdateListingProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shopId int32
		var listingId int32
		var propertyId int32

		resp, httpRes, err := apiClient.ShopListingApi.UpdateListingProperty(context.Background(), shopId, listingId, propertyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
