/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateListingInventoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateListingInventoryRequest{}

// UpdateListingInventoryRequest struct for UpdateListingInventoryRequest
type UpdateListingInventoryRequest struct {
	// A JSON array of products available in a listing, even if only one product. All field names in the JSON blobs are lowercase.
	Products []UpdateListingInventoryRequestProductsInner `json:"products"`
	// An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change product prices, if any. For example, if you charge specific prices for different sized products in the same listing, then this array contains the property ID for size.
	PriceOnProperty []int32 `json:"price_on_property,omitempty"`
	// An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the quantity of the products, if any. For example, if you stock specific quantities of different colored products in the same listing, then this array contains the property ID for color.
	QuantityOnProperty []int32 `json:"quantity_on_property,omitempty"`
	// An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the product SKU, if any. For example, if you use specific skus for different colored products in the same listing, then this array contains the property ID for color.
	SkuOnProperty []int32 `json:"sku_on_property,omitempty"`
}

// NewUpdateListingInventoryRequest instantiates a new UpdateListingInventoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateListingInventoryRequest(products []UpdateListingInventoryRequestProductsInner) *UpdateListingInventoryRequest {
	this := UpdateListingInventoryRequest{}
	this.Products = products
	return &this
}

// NewUpdateListingInventoryRequestWithDefaults instantiates a new UpdateListingInventoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateListingInventoryRequestWithDefaults() *UpdateListingInventoryRequest {
	this := UpdateListingInventoryRequest{}
	return &this
}

// GetProducts returns the Products field value
func (o *UpdateListingInventoryRequest) GetProducts() []UpdateListingInventoryRequestProductsInner {
	if o == nil {
		var ret []UpdateListingInventoryRequestProductsInner
		return ret
	}

	return o.Products
}

// GetProductsOk returns a tuple with the Products field value
// and a boolean to check if the value has been set.
func (o *UpdateListingInventoryRequest) GetProductsOk() ([]UpdateListingInventoryRequestProductsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Products, true
}

// SetProducts sets field value
func (o *UpdateListingInventoryRequest) SetProducts(v []UpdateListingInventoryRequestProductsInner) {
	o.Products = v
}

// GetPriceOnProperty returns the PriceOnProperty field value if set, zero value otherwise.
func (o *UpdateListingInventoryRequest) GetPriceOnProperty() []int32 {
	if o == nil || IsNil(o.PriceOnProperty) {
		var ret []int32
		return ret
	}
	return o.PriceOnProperty
}

// GetPriceOnPropertyOk returns a tuple with the PriceOnProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateListingInventoryRequest) GetPriceOnPropertyOk() ([]int32, bool) {
	if o == nil || IsNil(o.PriceOnProperty) {
		return nil, false
	}
	return o.PriceOnProperty, true
}

// HasPriceOnProperty returns a boolean if a field has been set.
func (o *UpdateListingInventoryRequest) HasPriceOnProperty() bool {
	if o != nil && !IsNil(o.PriceOnProperty) {
		return true
	}

	return false
}

// SetPriceOnProperty gets a reference to the given []int32 and assigns it to the PriceOnProperty field.
func (o *UpdateListingInventoryRequest) SetPriceOnProperty(v []int32) {
	o.PriceOnProperty = v
}

// GetQuantityOnProperty returns the QuantityOnProperty field value if set, zero value otherwise.
func (o *UpdateListingInventoryRequest) GetQuantityOnProperty() []int32 {
	if o == nil || IsNil(o.QuantityOnProperty) {
		var ret []int32
		return ret
	}
	return o.QuantityOnProperty
}

// GetQuantityOnPropertyOk returns a tuple with the QuantityOnProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateListingInventoryRequest) GetQuantityOnPropertyOk() ([]int32, bool) {
	if o == nil || IsNil(o.QuantityOnProperty) {
		return nil, false
	}
	return o.QuantityOnProperty, true
}

// HasQuantityOnProperty returns a boolean if a field has been set.
func (o *UpdateListingInventoryRequest) HasQuantityOnProperty() bool {
	if o != nil && !IsNil(o.QuantityOnProperty) {
		return true
	}

	return false
}

// SetQuantityOnProperty gets a reference to the given []int32 and assigns it to the QuantityOnProperty field.
func (o *UpdateListingInventoryRequest) SetQuantityOnProperty(v []int32) {
	o.QuantityOnProperty = v
}

// GetSkuOnProperty returns the SkuOnProperty field value if set, zero value otherwise.
func (o *UpdateListingInventoryRequest) GetSkuOnProperty() []int32 {
	if o == nil || IsNil(o.SkuOnProperty) {
		var ret []int32
		return ret
	}
	return o.SkuOnProperty
}

// GetSkuOnPropertyOk returns a tuple with the SkuOnProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateListingInventoryRequest) GetSkuOnPropertyOk() ([]int32, bool) {
	if o == nil || IsNil(o.SkuOnProperty) {
		return nil, false
	}
	return o.SkuOnProperty, true
}

// HasSkuOnProperty returns a boolean if a field has been set.
func (o *UpdateListingInventoryRequest) HasSkuOnProperty() bool {
	if o != nil && !IsNil(o.SkuOnProperty) {
		return true
	}

	return false
}

// SetSkuOnProperty gets a reference to the given []int32 and assigns it to the SkuOnProperty field.
func (o *UpdateListingInventoryRequest) SetSkuOnProperty(v []int32) {
	o.SkuOnProperty = v
}

func (o UpdateListingInventoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateListingInventoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["products"] = o.Products
	if !IsNil(o.PriceOnProperty) {
		toSerialize["price_on_property"] = o.PriceOnProperty
	}
	if !IsNil(o.QuantityOnProperty) {
		toSerialize["quantity_on_property"] = o.QuantityOnProperty
	}
	if !IsNil(o.SkuOnProperty) {
		toSerialize["sku_on_property"] = o.SkuOnProperty
	}
	return toSerialize, nil
}

type NullableUpdateListingInventoryRequest struct {
	value *UpdateListingInventoryRequest
	isSet bool
}

func (v NullableUpdateListingInventoryRequest) Get() *UpdateListingInventoryRequest {
	return v.value
}

func (v *NullableUpdateListingInventoryRequest) Set(val *UpdateListingInventoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateListingInventoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateListingInventoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateListingInventoryRequest(val *UpdateListingInventoryRequest) *NullableUpdateListingInventoryRequest {
	return &NullableUpdateListingInventoryRequest{value: val, isSet: true}
}

func (v NullableUpdateListingInventoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateListingInventoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


