/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListingInventoryProductPropertyValuesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListingInventoryProductPropertyValuesInner{}

// ListingInventoryProductPropertyValuesInner A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
type ListingInventoryProductPropertyValuesInner struct {
	// The numeric ID of the Property.
	PropertyId *int32 `json:"property_id,omitempty"`
	// The name of the Property.
	PropertyName NullableString `json:"property_name,omitempty"`
	// The numeric ID of the scale (if any).
	ScaleId NullableInt32 `json:"scale_id,omitempty"`
	// The label used to describe the chosen scale (if any).
	ScaleName NullableString `json:"scale_name,omitempty"`
	// The numeric IDs of the Property values
	ValueIds []int32 `json:"value_ids,omitempty"`
	// The Property values
	Values []string `json:"values,omitempty"`
}

// NewListingInventoryProductPropertyValuesInner instantiates a new ListingInventoryProductPropertyValuesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListingInventoryProductPropertyValuesInner() *ListingInventoryProductPropertyValuesInner {
	this := ListingInventoryProductPropertyValuesInner{}
	return &this
}

// NewListingInventoryProductPropertyValuesInnerWithDefaults instantiates a new ListingInventoryProductPropertyValuesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListingInventoryProductPropertyValuesInnerWithDefaults() *ListingInventoryProductPropertyValuesInner {
	this := ListingInventoryProductPropertyValuesInner{}
	return &this
}

// GetPropertyId returns the PropertyId field value if set, zero value otherwise.
func (o *ListingInventoryProductPropertyValuesInner) GetPropertyId() int32 {
	if o == nil || IsNil(o.PropertyId) {
		var ret int32
		return ret
	}
	return *o.PropertyId
}

// GetPropertyIdOk returns a tuple with the PropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingInventoryProductPropertyValuesInner) GetPropertyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PropertyId) {
		return nil, false
	}
	return o.PropertyId, true
}

// HasPropertyId returns a boolean if a field has been set.
func (o *ListingInventoryProductPropertyValuesInner) HasPropertyId() bool {
	if o != nil && !IsNil(o.PropertyId) {
		return true
	}

	return false
}

// SetPropertyId gets a reference to the given int32 and assigns it to the PropertyId field.
func (o *ListingInventoryProductPropertyValuesInner) SetPropertyId(v int32) {
	o.PropertyId = &v
}

// GetPropertyName returns the PropertyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListingInventoryProductPropertyValuesInner) GetPropertyName() string {
	if o == nil || IsNil(o.PropertyName.Get()) {
		var ret string
		return ret
	}
	return *o.PropertyName.Get()
}

// GetPropertyNameOk returns a tuple with the PropertyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListingInventoryProductPropertyValuesInner) GetPropertyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertyName.Get(), o.PropertyName.IsSet()
}

// HasPropertyName returns a boolean if a field has been set.
func (o *ListingInventoryProductPropertyValuesInner) HasPropertyName() bool {
	if o != nil && o.PropertyName.IsSet() {
		return true
	}

	return false
}

// SetPropertyName gets a reference to the given NullableString and assigns it to the PropertyName field.
func (o *ListingInventoryProductPropertyValuesInner) SetPropertyName(v string) {
	o.PropertyName.Set(&v)
}
// SetPropertyNameNil sets the value for PropertyName to be an explicit nil
func (o *ListingInventoryProductPropertyValuesInner) SetPropertyNameNil() {
	o.PropertyName.Set(nil)
}

// UnsetPropertyName ensures that no value is present for PropertyName, not even an explicit nil
func (o *ListingInventoryProductPropertyValuesInner) UnsetPropertyName() {
	o.PropertyName.Unset()
}

// GetScaleId returns the ScaleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListingInventoryProductPropertyValuesInner) GetScaleId() int32 {
	if o == nil || IsNil(o.ScaleId.Get()) {
		var ret int32
		return ret
	}
	return *o.ScaleId.Get()
}

// GetScaleIdOk returns a tuple with the ScaleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListingInventoryProductPropertyValuesInner) GetScaleIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScaleId.Get(), o.ScaleId.IsSet()
}

// HasScaleId returns a boolean if a field has been set.
func (o *ListingInventoryProductPropertyValuesInner) HasScaleId() bool {
	if o != nil && o.ScaleId.IsSet() {
		return true
	}

	return false
}

// SetScaleId gets a reference to the given NullableInt32 and assigns it to the ScaleId field.
func (o *ListingInventoryProductPropertyValuesInner) SetScaleId(v int32) {
	o.ScaleId.Set(&v)
}
// SetScaleIdNil sets the value for ScaleId to be an explicit nil
func (o *ListingInventoryProductPropertyValuesInner) SetScaleIdNil() {
	o.ScaleId.Set(nil)
}

// UnsetScaleId ensures that no value is present for ScaleId, not even an explicit nil
func (o *ListingInventoryProductPropertyValuesInner) UnsetScaleId() {
	o.ScaleId.Unset()
}

// GetScaleName returns the ScaleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListingInventoryProductPropertyValuesInner) GetScaleName() string {
	if o == nil || IsNil(o.ScaleName.Get()) {
		var ret string
		return ret
	}
	return *o.ScaleName.Get()
}

// GetScaleNameOk returns a tuple with the ScaleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListingInventoryProductPropertyValuesInner) GetScaleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScaleName.Get(), o.ScaleName.IsSet()
}

// HasScaleName returns a boolean if a field has been set.
func (o *ListingInventoryProductPropertyValuesInner) HasScaleName() bool {
	if o != nil && o.ScaleName.IsSet() {
		return true
	}

	return false
}

// SetScaleName gets a reference to the given NullableString and assigns it to the ScaleName field.
func (o *ListingInventoryProductPropertyValuesInner) SetScaleName(v string) {
	o.ScaleName.Set(&v)
}
// SetScaleNameNil sets the value for ScaleName to be an explicit nil
func (o *ListingInventoryProductPropertyValuesInner) SetScaleNameNil() {
	o.ScaleName.Set(nil)
}

// UnsetScaleName ensures that no value is present for ScaleName, not even an explicit nil
func (o *ListingInventoryProductPropertyValuesInner) UnsetScaleName() {
	o.ScaleName.Unset()
}

// GetValueIds returns the ValueIds field value if set, zero value otherwise.
func (o *ListingInventoryProductPropertyValuesInner) GetValueIds() []int32 {
	if o == nil || IsNil(o.ValueIds) {
		var ret []int32
		return ret
	}
	return o.ValueIds
}

// GetValueIdsOk returns a tuple with the ValueIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingInventoryProductPropertyValuesInner) GetValueIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ValueIds) {
		return nil, false
	}
	return o.ValueIds, true
}

// HasValueIds returns a boolean if a field has been set.
func (o *ListingInventoryProductPropertyValuesInner) HasValueIds() bool {
	if o != nil && !IsNil(o.ValueIds) {
		return true
	}

	return false
}

// SetValueIds gets a reference to the given []int32 and assigns it to the ValueIds field.
func (o *ListingInventoryProductPropertyValuesInner) SetValueIds(v []int32) {
	o.ValueIds = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ListingInventoryProductPropertyValuesInner) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingInventoryProductPropertyValuesInner) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ListingInventoryProductPropertyValuesInner) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *ListingInventoryProductPropertyValuesInner) SetValues(v []string) {
	o.Values = v
}

func (o ListingInventoryProductPropertyValuesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListingInventoryProductPropertyValuesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PropertyId) {
		toSerialize["property_id"] = o.PropertyId
	}
	if o.PropertyName.IsSet() {
		toSerialize["property_name"] = o.PropertyName.Get()
	}
	if o.ScaleId.IsSet() {
		toSerialize["scale_id"] = o.ScaleId.Get()
	}
	if o.ScaleName.IsSet() {
		toSerialize["scale_name"] = o.ScaleName.Get()
	}
	if !IsNil(o.ValueIds) {
		toSerialize["value_ids"] = o.ValueIds
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableListingInventoryProductPropertyValuesInner struct {
	value *ListingInventoryProductPropertyValuesInner
	isSet bool
}

func (v NullableListingInventoryProductPropertyValuesInner) Get() *ListingInventoryProductPropertyValuesInner {
	return v.value
}

func (v *NullableListingInventoryProductPropertyValuesInner) Set(val *ListingInventoryProductPropertyValuesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListingInventoryProductPropertyValuesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListingInventoryProductPropertyValuesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListingInventoryProductPropertyValuesInner(val *ListingInventoryProductPropertyValuesInner) *NullableListingInventoryProductPropertyValuesInner {
	return &NullableListingInventoryProductPropertyValuesInner{value: val, isSet: true}
}

func (v NullableListingInventoryProductPropertyValuesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListingInventoryProductPropertyValuesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


