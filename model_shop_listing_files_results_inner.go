/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ShopListingFilesResultsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShopListingFilesResultsInner{}

// ShopListingFilesResultsInner An array of ShopListingFile resources.
type ShopListingFilesResultsInner struct {
	// The unique numeric ID of a file associated with a digital listing.
	ListingFileId *int32 `json:"listing_file_id,omitempty"`
	// The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
	ListingId *int32 `json:"listing_id,omitempty"`
	// The numeric index of the display order position of this file in the listing, starting at 1.
	Rank *int32 `json:"rank,omitempty"`
	// The file name string for a file associated with a digital listing.
	Filename *string `json:"filename,omitempty"`
	// A human-readable format size string for the size of a file.
	Filesize *string `json:"filesize,omitempty"`
	// A number indicating the size of a file, measured in bytes.
	SizeBytes *int32 `json:"size_bytes,omitempty"`
	// A type string indicating a file's MIME type.
	Filetype *string `json:"filetype,omitempty"`
	// The unique numeric ID of a file associated with a digital listing.
	CreateTimestamp *int32 `json:"create_timestamp,omitempty"`
	// The unique numeric ID of a file associated with a digital listing.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
}

// NewShopListingFilesResultsInner instantiates a new ShopListingFilesResultsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopListingFilesResultsInner() *ShopListingFilesResultsInner {
	this := ShopListingFilesResultsInner{}
	return &this
}

// NewShopListingFilesResultsInnerWithDefaults instantiates a new ShopListingFilesResultsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopListingFilesResultsInnerWithDefaults() *ShopListingFilesResultsInner {
	this := ShopListingFilesResultsInner{}
	return &this
}

// GetListingFileId returns the ListingFileId field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetListingFileId() int32 {
	if o == nil || IsNil(o.ListingFileId) {
		var ret int32
		return ret
	}
	return *o.ListingFileId
}

// GetListingFileIdOk returns a tuple with the ListingFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetListingFileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ListingFileId) {
		return nil, false
	}
	return o.ListingFileId, true
}

// HasListingFileId returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasListingFileId() bool {
	if o != nil && !IsNil(o.ListingFileId) {
		return true
	}

	return false
}

// SetListingFileId gets a reference to the given int32 and assigns it to the ListingFileId field.
func (o *ShopListingFilesResultsInner) SetListingFileId(v int32) {
	o.ListingFileId = &v
}

// GetListingId returns the ListingId field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetListingId() int32 {
	if o == nil || IsNil(o.ListingId) {
		var ret int32
		return ret
	}
	return *o.ListingId
}

// GetListingIdOk returns a tuple with the ListingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetListingIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ListingId) {
		return nil, false
	}
	return o.ListingId, true
}

// HasListingId returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasListingId() bool {
	if o != nil && !IsNil(o.ListingId) {
		return true
	}

	return false
}

// SetListingId gets a reference to the given int32 and assigns it to the ListingId field.
func (o *ShopListingFilesResultsInner) SetListingId(v int32) {
	o.ListingId = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetRank() int32 {
	if o == nil || IsNil(o.Rank) {
		var ret int32
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetRankOk() (*int32, bool) {
	if o == nil || IsNil(o.Rank) {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasRank() bool {
	if o != nil && !IsNil(o.Rank) {
		return true
	}

	return false
}

// SetRank gets a reference to the given int32 and assigns it to the Rank field.
func (o *ShopListingFilesResultsInner) SetRank(v int32) {
	o.Rank = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *ShopListingFilesResultsInner) SetFilename(v string) {
	o.Filename = &v
}

// GetFilesize returns the Filesize field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetFilesize() string {
	if o == nil || IsNil(o.Filesize) {
		var ret string
		return ret
	}
	return *o.Filesize
}

// GetFilesizeOk returns a tuple with the Filesize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetFilesizeOk() (*string, bool) {
	if o == nil || IsNil(o.Filesize) {
		return nil, false
	}
	return o.Filesize, true
}

// HasFilesize returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasFilesize() bool {
	if o != nil && !IsNil(o.Filesize) {
		return true
	}

	return false
}

// SetFilesize gets a reference to the given string and assigns it to the Filesize field.
func (o *ShopListingFilesResultsInner) SetFilesize(v string) {
	o.Filesize = &v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetSizeBytes() int32 {
	if o == nil || IsNil(o.SizeBytes) {
		var ret int32
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetSizeBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeBytes) {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasSizeBytes() bool {
	if o != nil && !IsNil(o.SizeBytes) {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given int32 and assigns it to the SizeBytes field.
func (o *ShopListingFilesResultsInner) SetSizeBytes(v int32) {
	o.SizeBytes = &v
}

// GetFiletype returns the Filetype field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetFiletype() string {
	if o == nil || IsNil(o.Filetype) {
		var ret string
		return ret
	}
	return *o.Filetype
}

// GetFiletypeOk returns a tuple with the Filetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetFiletypeOk() (*string, bool) {
	if o == nil || IsNil(o.Filetype) {
		return nil, false
	}
	return o.Filetype, true
}

// HasFiletype returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasFiletype() bool {
	if o != nil && !IsNil(o.Filetype) {
		return true
	}

	return false
}

// SetFiletype gets a reference to the given string and assigns it to the Filetype field.
func (o *ShopListingFilesResultsInner) SetFiletype(v string) {
	o.Filetype = &v
}

// GetCreateTimestamp returns the CreateTimestamp field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetCreateTimestamp() int32 {
	if o == nil || IsNil(o.CreateTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreateTimestamp
}

// GetCreateTimestampOk returns a tuple with the CreateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetCreateTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreateTimestamp) {
		return nil, false
	}
	return o.CreateTimestamp, true
}

// HasCreateTimestamp returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasCreateTimestamp() bool {
	if o != nil && !IsNil(o.CreateTimestamp) {
		return true
	}

	return false
}

// SetCreateTimestamp gets a reference to the given int32 and assigns it to the CreateTimestamp field.
func (o *ShopListingFilesResultsInner) SetCreateTimestamp(v int32) {
	o.CreateTimestamp = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *ShopListingFilesResultsInner) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingFilesResultsInner) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *ShopListingFilesResultsInner) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *ShopListingFilesResultsInner) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

func (o ShopListingFilesResultsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShopListingFilesResultsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ListingFileId) {
		toSerialize["listing_file_id"] = o.ListingFileId
	}
	if !IsNil(o.ListingId) {
		toSerialize["listing_id"] = o.ListingId
	}
	if !IsNil(o.Rank) {
		toSerialize["rank"] = o.Rank
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Filesize) {
		toSerialize["filesize"] = o.Filesize
	}
	if !IsNil(o.SizeBytes) {
		toSerialize["size_bytes"] = o.SizeBytes
	}
	if !IsNil(o.Filetype) {
		toSerialize["filetype"] = o.Filetype
	}
	if !IsNil(o.CreateTimestamp) {
		toSerialize["create_timestamp"] = o.CreateTimestamp
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	return toSerialize, nil
}

type NullableShopListingFilesResultsInner struct {
	value *ShopListingFilesResultsInner
	isSet bool
}

func (v NullableShopListingFilesResultsInner) Get() *ShopListingFilesResultsInner {
	return v.value
}

func (v *NullableShopListingFilesResultsInner) Set(val *ShopListingFilesResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableShopListingFilesResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableShopListingFilesResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopListingFilesResultsInner(val *ShopListingFilesResultsInner) *NullableShopListingFilesResultsInner {
	return &NullableShopListingFilesResultsInner{value: val, isSet: true}
}

func (v NullableShopListingFilesResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopListingFilesResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


