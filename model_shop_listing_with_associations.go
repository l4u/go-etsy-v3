/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ShopListingWithAssociations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShopListingWithAssociations{}

// ShopListingWithAssociations A listing from a shop, which contains a product quantity, title, description, price, etc. and additional fields which represent associations.
type ShopListingWithAssociations struct {
	// The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
	ListingId *int32 `json:"listing_id,omitempty"`
	// The numeric ID for the [user](/documentation/reference#tag/User) posting the listing.
	UserId *int32 `json:"user_id,omitempty"`
	// The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId *int32 `json:"shop_id,omitempty"`
	// The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
	Title *string `json:"title,omitempty"`
	// A description string of the product for sale in the listing.
	Description *string `json:"description,omitempty"`
	// When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
	State *string `json:"state,omitempty"`
	// The listing\\'s creation time, in epoch seconds.
	CreationTimestamp *int32 `json:"creation_timestamp,omitempty"`
	// The listing\\'s creation time, in epoch seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The listing\\'s expiration time, in epoch seconds.
	EndingTimestamp *int32 `json:"ending_timestamp,omitempty"`
	// The listing\\'s creation time, in epoch seconds.
	OriginalCreationTimestamp *int32 `json:"original_creation_timestamp,omitempty"`
	// The time of the last update to the listing, in epoch seconds.
	LastModifiedTimestamp *int32 `json:"last_modified_timestamp,omitempty"`
	// The time of the last update to the listing, in epoch seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
	// The date and time of the last state change of this listing.
	StateTimestamp *int32 `json:"state_timestamp,omitempty"`
	// The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
	Quantity *int32 `json:"quantity,omitempty"`
	// The numeric ID of a section in a specific Etsy shop.
	ShopSectionId NullableInt32 `json:"shop_section_id,omitempty"`
	// The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
	FeaturedRank *int32 `json:"featured_rank,omitempty"`
	// The full URL to the listing's page on Etsy.
	Url *string `json:"url,omitempty"`
	// The number of users who marked this Listing a favorite.
	NumFavorers *int32 `json:"num_favorers,omitempty"`
	// When true, applicable [shop](/documentation/reference#tag/Shop) tax rates do not apply to this listing at checkout.
	NonTaxable *bool `json:"non_taxable,omitempty"`
	// When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
	IsTaxable *bool `json:"is_taxable,omitempty"`
	// When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
	IsCustomizable *bool `json:"is_customizable,omitempty"`
	// When true, this listing is personalizable. The default value is null.
	IsPersonalizable *bool `json:"is_personalizable,omitempty"`
	// When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationIsRequired *bool `json:"personalization_is_required,omitempty"`
	// This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
	PersonalizationCharCountMax NullableInt32 `json:"personalization_char_count_max,omitempty"`
	// When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
	PersonalizationInstructions NullableString `json:"personalization_instructions,omitempty"`
	// An enumerated type string that indicates whether the listing is physical or a digital download.
	ListingType *string `json:"listing_type,omitempty"`
	// A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
	Tags []string `json:"tags,omitempty"`
	// A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
	Materials []string `json:"materials,omitempty"`
	// The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	ShippingProfileId NullableInt32 `json:"shipping_profile_id,omitempty"`
	// The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
	ReturnPolicyId NullableInt32 `json:"return_policy_id,omitempty"`
	// The minimum number of days required to process this listing. Default value is null.
	ProcessingMin NullableInt32 `json:"processing_min,omitempty"`
	// The maximum number of days required to process this listing. Default value is null.
	ProcessingMax NullableInt32 `json:"processing_max,omitempty"`
	// An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
	WhoMade NullableString `json:"who_made,omitempty"`
	// An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
	WhenMade NullableString `json:"when_made,omitempty"`
	// When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
	IsSupply NullableBool `json:"is_supply,omitempty"`
	// The numeric weight of the product measured in units set in \\'item_weight_unit\\'. Default value is null. If set, the value must be greater than 0.
	ItemWeight NullableFloat32 `json:"item_weight,omitempty"`
	// A string defining the units used to measure the weight of the product. Default value is null.
	ItemWeightUnit NullableString `json:"item_weight_unit,omitempty"`
	// The numeric length of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.
	ItemLength NullableFloat32 `json:"item_length,omitempty"`
	// The numeric width of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.
	ItemWidth NullableFloat32 `json:"item_width,omitempty"`
	// The numeric length of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.
	ItemHeight NullableFloat32 `json:"item_height,omitempty"`
	// A string defining the units used to measure the dimensions of the product. Default value is null.
	ItemDimensionsUnit NullableString `json:"item_dimensions_unit,omitempty"`
	// When true, this is a private listing intended for a specific buyer and hidden from shop view.
	IsPrivate *bool `json:"is_private,omitempty"`
	// An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
	Style []string `json:"style,omitempty"`
	// A string describing the files attached to a digital listing.
	FileData *string `json:"file_data,omitempty"`
	// When true, the listing has variations.
	HasVariations *bool `json:"has_variations,omitempty"`
	// When true, renews a listing for four months upon expiration.
	ShouldAutoRenew *bool `json:"should_auto_renew,omitempty"`
	// The IETF language tag for the default language of the listing. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`, `ru`.
	Language NullableString `json:"language,omitempty"`
	Price *ShopListingPrice `json:"price,omitempty"`
	// The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
	TaxonomyId NullableInt32 `json:"taxonomy_id,omitempty"`
	ShippingProfile *ShopListingWithAssociationsShippingProfile `json:"shipping_profile,omitempty"`
	User *ShopListingWithAssociationsUser `json:"user,omitempty"`
	Shop *ShopListingWithAssociationsShop `json:"shop,omitempty"`
	// Represents a list of listing image resources, each of which contains the reference URLs and metadata for an image
	Images []ShopListingWithAssociationsImagesInner `json:"images,omitempty"`
	// The single video associated with a listing.
	Videos []ShopListingWithAssociationsVideosInner `json:"videos,omitempty"`
	Inventory *ShopListingWithAssociationsInventory `json:"inventory,omitempty"`
	// Represents a list of production partners for a shop.
	ProductionPartners []ShopListingWithAssociationsProductionPartnersInner `json:"production_partners,omitempty"`
	// A list of SKU strings for the listing. SKUs will only appear if the requesting user owns the shop and a valid matching OAuth 2 token is provided. When requested without the token it will be an empty array.
	Skus []string `json:"skus,omitempty"`
	// An array of translations for the listing. Default value is an empty array.
	Translations []ShopListingWithAssociationsTranslationsInner `json:"translations,omitempty"`
	// The number of times the listing has been viewed. This value is tabulated once per day and **only for active listings**, so the value is not real-time. If `0`, the listing has either not been viewed, not yet tabulated, was not active during the last tabulation or there was an error fetching the value. If a value is expected, call `getListing` to confirm the value.
	Views *int32 `json:"views,omitempty"`
}

// NewShopListingWithAssociations instantiates a new ShopListingWithAssociations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopListingWithAssociations() *ShopListingWithAssociations {
	this := ShopListingWithAssociations{}
	return &this
}

// NewShopListingWithAssociationsWithDefaults instantiates a new ShopListingWithAssociations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopListingWithAssociationsWithDefaults() *ShopListingWithAssociations {
	this := ShopListingWithAssociations{}
	return &this
}

// GetListingId returns the ListingId field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetListingId() int32 {
	if o == nil || IsNil(o.ListingId) {
		var ret int32
		return ret
	}
	return *o.ListingId
}

// GetListingIdOk returns a tuple with the ListingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetListingIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ListingId) {
		return nil, false
	}
	return o.ListingId, true
}

// HasListingId returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasListingId() bool {
	if o != nil && !IsNil(o.ListingId) {
		return true
	}

	return false
}

// SetListingId gets a reference to the given int32 and assigns it to the ListingId field.
func (o *ShopListingWithAssociations) SetListingId(v int32) {
	o.ListingId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *ShopListingWithAssociations) SetUserId(v int32) {
	o.UserId = &v
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetShopId() int32 {
	if o == nil || IsNil(o.ShopId) {
		var ret int32
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetShopIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given int32 and assigns it to the ShopId field.
func (o *ShopListingWithAssociations) SetShopId(v int32) {
	o.ShopId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ShopListingWithAssociations) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ShopListingWithAssociations) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ShopListingWithAssociations) SetState(v string) {
	o.State = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetCreationTimestamp() int32 {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetCreationTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given int32 and assigns it to the CreationTimestamp field.
func (o *ShopListingWithAssociations) SetCreationTimestamp(v int32) {
	o.CreationTimestamp = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *ShopListingWithAssociations) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetEndingTimestamp returns the EndingTimestamp field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetEndingTimestamp() int32 {
	if o == nil || IsNil(o.EndingTimestamp) {
		var ret int32
		return ret
	}
	return *o.EndingTimestamp
}

// GetEndingTimestampOk returns a tuple with the EndingTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetEndingTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.EndingTimestamp) {
		return nil, false
	}
	return o.EndingTimestamp, true
}

// HasEndingTimestamp returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasEndingTimestamp() bool {
	if o != nil && !IsNil(o.EndingTimestamp) {
		return true
	}

	return false
}

// SetEndingTimestamp gets a reference to the given int32 and assigns it to the EndingTimestamp field.
func (o *ShopListingWithAssociations) SetEndingTimestamp(v int32) {
	o.EndingTimestamp = &v
}

// GetOriginalCreationTimestamp returns the OriginalCreationTimestamp field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetOriginalCreationTimestamp() int32 {
	if o == nil || IsNil(o.OriginalCreationTimestamp) {
		var ret int32
		return ret
	}
	return *o.OriginalCreationTimestamp
}

// GetOriginalCreationTimestampOk returns a tuple with the OriginalCreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetOriginalCreationTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginalCreationTimestamp) {
		return nil, false
	}
	return o.OriginalCreationTimestamp, true
}

// HasOriginalCreationTimestamp returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasOriginalCreationTimestamp() bool {
	if o != nil && !IsNil(o.OriginalCreationTimestamp) {
		return true
	}

	return false
}

// SetOriginalCreationTimestamp gets a reference to the given int32 and assigns it to the OriginalCreationTimestamp field.
func (o *ShopListingWithAssociations) SetOriginalCreationTimestamp(v int32) {
	o.OriginalCreationTimestamp = &v
}

// GetLastModifiedTimestamp returns the LastModifiedTimestamp field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetLastModifiedTimestamp() int32 {
	if o == nil || IsNil(o.LastModifiedTimestamp) {
		var ret int32
		return ret
	}
	return *o.LastModifiedTimestamp
}

// GetLastModifiedTimestampOk returns a tuple with the LastModifiedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetLastModifiedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.LastModifiedTimestamp) {
		return nil, false
	}
	return o.LastModifiedTimestamp, true
}

// HasLastModifiedTimestamp returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasLastModifiedTimestamp() bool {
	if o != nil && !IsNil(o.LastModifiedTimestamp) {
		return true
	}

	return false
}

// SetLastModifiedTimestamp gets a reference to the given int32 and assigns it to the LastModifiedTimestamp field.
func (o *ShopListingWithAssociations) SetLastModifiedTimestamp(v int32) {
	o.LastModifiedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *ShopListingWithAssociations) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

// GetStateTimestamp returns the StateTimestamp field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetStateTimestamp() int32 {
	if o == nil || IsNil(o.StateTimestamp) {
		var ret int32
		return ret
	}
	return *o.StateTimestamp
}

// GetStateTimestampOk returns a tuple with the StateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetStateTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.StateTimestamp) {
		return nil, false
	}
	return o.StateTimestamp, true
}

// HasStateTimestamp returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasStateTimestamp() bool {
	if o != nil && !IsNil(o.StateTimestamp) {
		return true
	}

	return false
}

// SetStateTimestamp gets a reference to the given int32 and assigns it to the StateTimestamp field.
func (o *ShopListingWithAssociations) SetStateTimestamp(v int32) {
	o.StateTimestamp = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ShopListingWithAssociations) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetShopSectionId returns the ShopSectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetShopSectionId() int32 {
	if o == nil || IsNil(o.ShopSectionId.Get()) {
		var ret int32
		return ret
	}
	return *o.ShopSectionId.Get()
}

// GetShopSectionIdOk returns a tuple with the ShopSectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetShopSectionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShopSectionId.Get(), o.ShopSectionId.IsSet()
}

// HasShopSectionId returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasShopSectionId() bool {
	if o != nil && o.ShopSectionId.IsSet() {
		return true
	}

	return false
}

// SetShopSectionId gets a reference to the given NullableInt32 and assigns it to the ShopSectionId field.
func (o *ShopListingWithAssociations) SetShopSectionId(v int32) {
	o.ShopSectionId.Set(&v)
}
// SetShopSectionIdNil sets the value for ShopSectionId to be an explicit nil
func (o *ShopListingWithAssociations) SetShopSectionIdNil() {
	o.ShopSectionId.Set(nil)
}

// UnsetShopSectionId ensures that no value is present for ShopSectionId, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetShopSectionId() {
	o.ShopSectionId.Unset()
}

// GetFeaturedRank returns the FeaturedRank field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetFeaturedRank() int32 {
	if o == nil || IsNil(o.FeaturedRank) {
		var ret int32
		return ret
	}
	return *o.FeaturedRank
}

// GetFeaturedRankOk returns a tuple with the FeaturedRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetFeaturedRankOk() (*int32, bool) {
	if o == nil || IsNil(o.FeaturedRank) {
		return nil, false
	}
	return o.FeaturedRank, true
}

// HasFeaturedRank returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasFeaturedRank() bool {
	if o != nil && !IsNil(o.FeaturedRank) {
		return true
	}

	return false
}

// SetFeaturedRank gets a reference to the given int32 and assigns it to the FeaturedRank field.
func (o *ShopListingWithAssociations) SetFeaturedRank(v int32) {
	o.FeaturedRank = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ShopListingWithAssociations) SetUrl(v string) {
	o.Url = &v
}

// GetNumFavorers returns the NumFavorers field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetNumFavorers() int32 {
	if o == nil || IsNil(o.NumFavorers) {
		var ret int32
		return ret
	}
	return *o.NumFavorers
}

// GetNumFavorersOk returns a tuple with the NumFavorers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetNumFavorersOk() (*int32, bool) {
	if o == nil || IsNil(o.NumFavorers) {
		return nil, false
	}
	return o.NumFavorers, true
}

// HasNumFavorers returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasNumFavorers() bool {
	if o != nil && !IsNil(o.NumFavorers) {
		return true
	}

	return false
}

// SetNumFavorers gets a reference to the given int32 and assigns it to the NumFavorers field.
func (o *ShopListingWithAssociations) SetNumFavorers(v int32) {
	o.NumFavorers = &v
}

// GetNonTaxable returns the NonTaxable field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetNonTaxable() bool {
	if o == nil || IsNil(o.NonTaxable) {
		var ret bool
		return ret
	}
	return *o.NonTaxable
}

// GetNonTaxableOk returns a tuple with the NonTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetNonTaxableOk() (*bool, bool) {
	if o == nil || IsNil(o.NonTaxable) {
		return nil, false
	}
	return o.NonTaxable, true
}

// HasNonTaxable returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasNonTaxable() bool {
	if o != nil && !IsNil(o.NonTaxable) {
		return true
	}

	return false
}

// SetNonTaxable gets a reference to the given bool and assigns it to the NonTaxable field.
func (o *ShopListingWithAssociations) SetNonTaxable(v bool) {
	o.NonTaxable = &v
}

// GetIsTaxable returns the IsTaxable field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetIsTaxable() bool {
	if o == nil || IsNil(o.IsTaxable) {
		var ret bool
		return ret
	}
	return *o.IsTaxable
}

// GetIsTaxableOk returns a tuple with the IsTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetIsTaxableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTaxable) {
		return nil, false
	}
	return o.IsTaxable, true
}

// HasIsTaxable returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasIsTaxable() bool {
	if o != nil && !IsNil(o.IsTaxable) {
		return true
	}

	return false
}

// SetIsTaxable gets a reference to the given bool and assigns it to the IsTaxable field.
func (o *ShopListingWithAssociations) SetIsTaxable(v bool) {
	o.IsTaxable = &v
}

// GetIsCustomizable returns the IsCustomizable field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetIsCustomizable() bool {
	if o == nil || IsNil(o.IsCustomizable) {
		var ret bool
		return ret
	}
	return *o.IsCustomizable
}

// GetIsCustomizableOk returns a tuple with the IsCustomizable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetIsCustomizableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustomizable) {
		return nil, false
	}
	return o.IsCustomizable, true
}

// HasIsCustomizable returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasIsCustomizable() bool {
	if o != nil && !IsNil(o.IsCustomizable) {
		return true
	}

	return false
}

// SetIsCustomizable gets a reference to the given bool and assigns it to the IsCustomizable field.
func (o *ShopListingWithAssociations) SetIsCustomizable(v bool) {
	o.IsCustomizable = &v
}

// GetIsPersonalizable returns the IsPersonalizable field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetIsPersonalizable() bool {
	if o == nil || IsNil(o.IsPersonalizable) {
		var ret bool
		return ret
	}
	return *o.IsPersonalizable
}

// GetIsPersonalizableOk returns a tuple with the IsPersonalizable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetIsPersonalizableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPersonalizable) {
		return nil, false
	}
	return o.IsPersonalizable, true
}

// HasIsPersonalizable returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasIsPersonalizable() bool {
	if o != nil && !IsNil(o.IsPersonalizable) {
		return true
	}

	return false
}

// SetIsPersonalizable gets a reference to the given bool and assigns it to the IsPersonalizable field.
func (o *ShopListingWithAssociations) SetIsPersonalizable(v bool) {
	o.IsPersonalizable = &v
}

// GetPersonalizationIsRequired returns the PersonalizationIsRequired field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetPersonalizationIsRequired() bool {
	if o == nil || IsNil(o.PersonalizationIsRequired) {
		var ret bool
		return ret
	}
	return *o.PersonalizationIsRequired
}

// GetPersonalizationIsRequiredOk returns a tuple with the PersonalizationIsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetPersonalizationIsRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.PersonalizationIsRequired) {
		return nil, false
	}
	return o.PersonalizationIsRequired, true
}

// HasPersonalizationIsRequired returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasPersonalizationIsRequired() bool {
	if o != nil && !IsNil(o.PersonalizationIsRequired) {
		return true
	}

	return false
}

// SetPersonalizationIsRequired gets a reference to the given bool and assigns it to the PersonalizationIsRequired field.
func (o *ShopListingWithAssociations) SetPersonalizationIsRequired(v bool) {
	o.PersonalizationIsRequired = &v
}

// GetPersonalizationCharCountMax returns the PersonalizationCharCountMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetPersonalizationCharCountMax() int32 {
	if o == nil || IsNil(o.PersonalizationCharCountMax.Get()) {
		var ret int32
		return ret
	}
	return *o.PersonalizationCharCountMax.Get()
}

// GetPersonalizationCharCountMaxOk returns a tuple with the PersonalizationCharCountMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetPersonalizationCharCountMaxOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PersonalizationCharCountMax.Get(), o.PersonalizationCharCountMax.IsSet()
}

// HasPersonalizationCharCountMax returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasPersonalizationCharCountMax() bool {
	if o != nil && o.PersonalizationCharCountMax.IsSet() {
		return true
	}

	return false
}

// SetPersonalizationCharCountMax gets a reference to the given NullableInt32 and assigns it to the PersonalizationCharCountMax field.
func (o *ShopListingWithAssociations) SetPersonalizationCharCountMax(v int32) {
	o.PersonalizationCharCountMax.Set(&v)
}
// SetPersonalizationCharCountMaxNil sets the value for PersonalizationCharCountMax to be an explicit nil
func (o *ShopListingWithAssociations) SetPersonalizationCharCountMaxNil() {
	o.PersonalizationCharCountMax.Set(nil)
}

// UnsetPersonalizationCharCountMax ensures that no value is present for PersonalizationCharCountMax, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetPersonalizationCharCountMax() {
	o.PersonalizationCharCountMax.Unset()
}

// GetPersonalizationInstructions returns the PersonalizationInstructions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetPersonalizationInstructions() string {
	if o == nil || IsNil(o.PersonalizationInstructions.Get()) {
		var ret string
		return ret
	}
	return *o.PersonalizationInstructions.Get()
}

// GetPersonalizationInstructionsOk returns a tuple with the PersonalizationInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetPersonalizationInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PersonalizationInstructions.Get(), o.PersonalizationInstructions.IsSet()
}

// HasPersonalizationInstructions returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasPersonalizationInstructions() bool {
	if o != nil && o.PersonalizationInstructions.IsSet() {
		return true
	}

	return false
}

// SetPersonalizationInstructions gets a reference to the given NullableString and assigns it to the PersonalizationInstructions field.
func (o *ShopListingWithAssociations) SetPersonalizationInstructions(v string) {
	o.PersonalizationInstructions.Set(&v)
}
// SetPersonalizationInstructionsNil sets the value for PersonalizationInstructions to be an explicit nil
func (o *ShopListingWithAssociations) SetPersonalizationInstructionsNil() {
	o.PersonalizationInstructions.Set(nil)
}

// UnsetPersonalizationInstructions ensures that no value is present for PersonalizationInstructions, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetPersonalizationInstructions() {
	o.PersonalizationInstructions.Unset()
}

// GetListingType returns the ListingType field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetListingType() string {
	if o == nil || IsNil(o.ListingType) {
		var ret string
		return ret
	}
	return *o.ListingType
}

// GetListingTypeOk returns a tuple with the ListingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetListingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ListingType) {
		return nil, false
	}
	return o.ListingType, true
}

// HasListingType returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasListingType() bool {
	if o != nil && !IsNil(o.ListingType) {
		return true
	}

	return false
}

// SetListingType gets a reference to the given string and assigns it to the ListingType field.
func (o *ShopListingWithAssociations) SetListingType(v string) {
	o.ListingType = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ShopListingWithAssociations) SetTags(v []string) {
	o.Tags = v
}

// GetMaterials returns the Materials field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetMaterials() []string {
	if o == nil || IsNil(o.Materials) {
		var ret []string
		return ret
	}
	return o.Materials
}

// GetMaterialsOk returns a tuple with the Materials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetMaterialsOk() ([]string, bool) {
	if o == nil || IsNil(o.Materials) {
		return nil, false
	}
	return o.Materials, true
}

// HasMaterials returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasMaterials() bool {
	if o != nil && !IsNil(o.Materials) {
		return true
	}

	return false
}

// SetMaterials gets a reference to the given []string and assigns it to the Materials field.
func (o *ShopListingWithAssociations) SetMaterials(v []string) {
	o.Materials = v
}

// GetShippingProfileId returns the ShippingProfileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetShippingProfileId() int32 {
	if o == nil || IsNil(o.ShippingProfileId.Get()) {
		var ret int32
		return ret
	}
	return *o.ShippingProfileId.Get()
}

// GetShippingProfileIdOk returns a tuple with the ShippingProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetShippingProfileIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShippingProfileId.Get(), o.ShippingProfileId.IsSet()
}

// HasShippingProfileId returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasShippingProfileId() bool {
	if o != nil && o.ShippingProfileId.IsSet() {
		return true
	}

	return false
}

// SetShippingProfileId gets a reference to the given NullableInt32 and assigns it to the ShippingProfileId field.
func (o *ShopListingWithAssociations) SetShippingProfileId(v int32) {
	o.ShippingProfileId.Set(&v)
}
// SetShippingProfileIdNil sets the value for ShippingProfileId to be an explicit nil
func (o *ShopListingWithAssociations) SetShippingProfileIdNil() {
	o.ShippingProfileId.Set(nil)
}

// UnsetShippingProfileId ensures that no value is present for ShippingProfileId, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetShippingProfileId() {
	o.ShippingProfileId.Unset()
}

// GetReturnPolicyId returns the ReturnPolicyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetReturnPolicyId() int32 {
	if o == nil || IsNil(o.ReturnPolicyId.Get()) {
		var ret int32
		return ret
	}
	return *o.ReturnPolicyId.Get()
}

// GetReturnPolicyIdOk returns a tuple with the ReturnPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetReturnPolicyIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReturnPolicyId.Get(), o.ReturnPolicyId.IsSet()
}

// HasReturnPolicyId returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasReturnPolicyId() bool {
	if o != nil && o.ReturnPolicyId.IsSet() {
		return true
	}

	return false
}

// SetReturnPolicyId gets a reference to the given NullableInt32 and assigns it to the ReturnPolicyId field.
func (o *ShopListingWithAssociations) SetReturnPolicyId(v int32) {
	o.ReturnPolicyId.Set(&v)
}
// SetReturnPolicyIdNil sets the value for ReturnPolicyId to be an explicit nil
func (o *ShopListingWithAssociations) SetReturnPolicyIdNil() {
	o.ReturnPolicyId.Set(nil)
}

// UnsetReturnPolicyId ensures that no value is present for ReturnPolicyId, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetReturnPolicyId() {
	o.ReturnPolicyId.Unset()
}

// GetProcessingMin returns the ProcessingMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetProcessingMin() int32 {
	if o == nil || IsNil(o.ProcessingMin.Get()) {
		var ret int32
		return ret
	}
	return *o.ProcessingMin.Get()
}

// GetProcessingMinOk returns a tuple with the ProcessingMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetProcessingMinOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessingMin.Get(), o.ProcessingMin.IsSet()
}

// HasProcessingMin returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasProcessingMin() bool {
	if o != nil && o.ProcessingMin.IsSet() {
		return true
	}

	return false
}

// SetProcessingMin gets a reference to the given NullableInt32 and assigns it to the ProcessingMin field.
func (o *ShopListingWithAssociations) SetProcessingMin(v int32) {
	o.ProcessingMin.Set(&v)
}
// SetProcessingMinNil sets the value for ProcessingMin to be an explicit nil
func (o *ShopListingWithAssociations) SetProcessingMinNil() {
	o.ProcessingMin.Set(nil)
}

// UnsetProcessingMin ensures that no value is present for ProcessingMin, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetProcessingMin() {
	o.ProcessingMin.Unset()
}

// GetProcessingMax returns the ProcessingMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetProcessingMax() int32 {
	if o == nil || IsNil(o.ProcessingMax.Get()) {
		var ret int32
		return ret
	}
	return *o.ProcessingMax.Get()
}

// GetProcessingMaxOk returns a tuple with the ProcessingMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetProcessingMaxOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessingMax.Get(), o.ProcessingMax.IsSet()
}

// HasProcessingMax returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasProcessingMax() bool {
	if o != nil && o.ProcessingMax.IsSet() {
		return true
	}

	return false
}

// SetProcessingMax gets a reference to the given NullableInt32 and assigns it to the ProcessingMax field.
func (o *ShopListingWithAssociations) SetProcessingMax(v int32) {
	o.ProcessingMax.Set(&v)
}
// SetProcessingMaxNil sets the value for ProcessingMax to be an explicit nil
func (o *ShopListingWithAssociations) SetProcessingMaxNil() {
	o.ProcessingMax.Set(nil)
}

// UnsetProcessingMax ensures that no value is present for ProcessingMax, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetProcessingMax() {
	o.ProcessingMax.Unset()
}

// GetWhoMade returns the WhoMade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetWhoMade() string {
	if o == nil || IsNil(o.WhoMade.Get()) {
		var ret string
		return ret
	}
	return *o.WhoMade.Get()
}

// GetWhoMadeOk returns a tuple with the WhoMade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetWhoMadeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WhoMade.Get(), o.WhoMade.IsSet()
}

// HasWhoMade returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasWhoMade() bool {
	if o != nil && o.WhoMade.IsSet() {
		return true
	}

	return false
}

// SetWhoMade gets a reference to the given NullableString and assigns it to the WhoMade field.
func (o *ShopListingWithAssociations) SetWhoMade(v string) {
	o.WhoMade.Set(&v)
}
// SetWhoMadeNil sets the value for WhoMade to be an explicit nil
func (o *ShopListingWithAssociations) SetWhoMadeNil() {
	o.WhoMade.Set(nil)
}

// UnsetWhoMade ensures that no value is present for WhoMade, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetWhoMade() {
	o.WhoMade.Unset()
}

// GetWhenMade returns the WhenMade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetWhenMade() string {
	if o == nil || IsNil(o.WhenMade.Get()) {
		var ret string
		return ret
	}
	return *o.WhenMade.Get()
}

// GetWhenMadeOk returns a tuple with the WhenMade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetWhenMadeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WhenMade.Get(), o.WhenMade.IsSet()
}

// HasWhenMade returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasWhenMade() bool {
	if o != nil && o.WhenMade.IsSet() {
		return true
	}

	return false
}

// SetWhenMade gets a reference to the given NullableString and assigns it to the WhenMade field.
func (o *ShopListingWithAssociations) SetWhenMade(v string) {
	o.WhenMade.Set(&v)
}
// SetWhenMadeNil sets the value for WhenMade to be an explicit nil
func (o *ShopListingWithAssociations) SetWhenMadeNil() {
	o.WhenMade.Set(nil)
}

// UnsetWhenMade ensures that no value is present for WhenMade, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetWhenMade() {
	o.WhenMade.Unset()
}

// GetIsSupply returns the IsSupply field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetIsSupply() bool {
	if o == nil || IsNil(o.IsSupply.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSupply.Get()
}

// GetIsSupplyOk returns a tuple with the IsSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetIsSupplyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSupply.Get(), o.IsSupply.IsSet()
}

// HasIsSupply returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasIsSupply() bool {
	if o != nil && o.IsSupply.IsSet() {
		return true
	}

	return false
}

// SetIsSupply gets a reference to the given NullableBool and assigns it to the IsSupply field.
func (o *ShopListingWithAssociations) SetIsSupply(v bool) {
	o.IsSupply.Set(&v)
}
// SetIsSupplyNil sets the value for IsSupply to be an explicit nil
func (o *ShopListingWithAssociations) SetIsSupplyNil() {
	o.IsSupply.Set(nil)
}

// UnsetIsSupply ensures that no value is present for IsSupply, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetIsSupply() {
	o.IsSupply.Unset()
}

// GetItemWeight returns the ItemWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetItemWeight() float32 {
	if o == nil || IsNil(o.ItemWeight.Get()) {
		var ret float32
		return ret
	}
	return *o.ItemWeight.Get()
}

// GetItemWeightOk returns a tuple with the ItemWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetItemWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemWeight.Get(), o.ItemWeight.IsSet()
}

// HasItemWeight returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasItemWeight() bool {
	if o != nil && o.ItemWeight.IsSet() {
		return true
	}

	return false
}

// SetItemWeight gets a reference to the given NullableFloat32 and assigns it to the ItemWeight field.
func (o *ShopListingWithAssociations) SetItemWeight(v float32) {
	o.ItemWeight.Set(&v)
}
// SetItemWeightNil sets the value for ItemWeight to be an explicit nil
func (o *ShopListingWithAssociations) SetItemWeightNil() {
	o.ItemWeight.Set(nil)
}

// UnsetItemWeight ensures that no value is present for ItemWeight, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetItemWeight() {
	o.ItemWeight.Unset()
}

// GetItemWeightUnit returns the ItemWeightUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetItemWeightUnit() string {
	if o == nil || IsNil(o.ItemWeightUnit.Get()) {
		var ret string
		return ret
	}
	return *o.ItemWeightUnit.Get()
}

// GetItemWeightUnitOk returns a tuple with the ItemWeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetItemWeightUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemWeightUnit.Get(), o.ItemWeightUnit.IsSet()
}

// HasItemWeightUnit returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasItemWeightUnit() bool {
	if o != nil && o.ItemWeightUnit.IsSet() {
		return true
	}

	return false
}

// SetItemWeightUnit gets a reference to the given NullableString and assigns it to the ItemWeightUnit field.
func (o *ShopListingWithAssociations) SetItemWeightUnit(v string) {
	o.ItemWeightUnit.Set(&v)
}
// SetItemWeightUnitNil sets the value for ItemWeightUnit to be an explicit nil
func (o *ShopListingWithAssociations) SetItemWeightUnitNil() {
	o.ItemWeightUnit.Set(nil)
}

// UnsetItemWeightUnit ensures that no value is present for ItemWeightUnit, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetItemWeightUnit() {
	o.ItemWeightUnit.Unset()
}

// GetItemLength returns the ItemLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetItemLength() float32 {
	if o == nil || IsNil(o.ItemLength.Get()) {
		var ret float32
		return ret
	}
	return *o.ItemLength.Get()
}

// GetItemLengthOk returns a tuple with the ItemLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetItemLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemLength.Get(), o.ItemLength.IsSet()
}

// HasItemLength returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasItemLength() bool {
	if o != nil && o.ItemLength.IsSet() {
		return true
	}

	return false
}

// SetItemLength gets a reference to the given NullableFloat32 and assigns it to the ItemLength field.
func (o *ShopListingWithAssociations) SetItemLength(v float32) {
	o.ItemLength.Set(&v)
}
// SetItemLengthNil sets the value for ItemLength to be an explicit nil
func (o *ShopListingWithAssociations) SetItemLengthNil() {
	o.ItemLength.Set(nil)
}

// UnsetItemLength ensures that no value is present for ItemLength, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetItemLength() {
	o.ItemLength.Unset()
}

// GetItemWidth returns the ItemWidth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetItemWidth() float32 {
	if o == nil || IsNil(o.ItemWidth.Get()) {
		var ret float32
		return ret
	}
	return *o.ItemWidth.Get()
}

// GetItemWidthOk returns a tuple with the ItemWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetItemWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemWidth.Get(), o.ItemWidth.IsSet()
}

// HasItemWidth returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasItemWidth() bool {
	if o != nil && o.ItemWidth.IsSet() {
		return true
	}

	return false
}

// SetItemWidth gets a reference to the given NullableFloat32 and assigns it to the ItemWidth field.
func (o *ShopListingWithAssociations) SetItemWidth(v float32) {
	o.ItemWidth.Set(&v)
}
// SetItemWidthNil sets the value for ItemWidth to be an explicit nil
func (o *ShopListingWithAssociations) SetItemWidthNil() {
	o.ItemWidth.Set(nil)
}

// UnsetItemWidth ensures that no value is present for ItemWidth, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetItemWidth() {
	o.ItemWidth.Unset()
}

// GetItemHeight returns the ItemHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetItemHeight() float32 {
	if o == nil || IsNil(o.ItemHeight.Get()) {
		var ret float32
		return ret
	}
	return *o.ItemHeight.Get()
}

// GetItemHeightOk returns a tuple with the ItemHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetItemHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemHeight.Get(), o.ItemHeight.IsSet()
}

// HasItemHeight returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasItemHeight() bool {
	if o != nil && o.ItemHeight.IsSet() {
		return true
	}

	return false
}

// SetItemHeight gets a reference to the given NullableFloat32 and assigns it to the ItemHeight field.
func (o *ShopListingWithAssociations) SetItemHeight(v float32) {
	o.ItemHeight.Set(&v)
}
// SetItemHeightNil sets the value for ItemHeight to be an explicit nil
func (o *ShopListingWithAssociations) SetItemHeightNil() {
	o.ItemHeight.Set(nil)
}

// UnsetItemHeight ensures that no value is present for ItemHeight, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetItemHeight() {
	o.ItemHeight.Unset()
}

// GetItemDimensionsUnit returns the ItemDimensionsUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetItemDimensionsUnit() string {
	if o == nil || IsNil(o.ItemDimensionsUnit.Get()) {
		var ret string
		return ret
	}
	return *o.ItemDimensionsUnit.Get()
}

// GetItemDimensionsUnitOk returns a tuple with the ItemDimensionsUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetItemDimensionsUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemDimensionsUnit.Get(), o.ItemDimensionsUnit.IsSet()
}

// HasItemDimensionsUnit returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasItemDimensionsUnit() bool {
	if o != nil && o.ItemDimensionsUnit.IsSet() {
		return true
	}

	return false
}

// SetItemDimensionsUnit gets a reference to the given NullableString and assigns it to the ItemDimensionsUnit field.
func (o *ShopListingWithAssociations) SetItemDimensionsUnit(v string) {
	o.ItemDimensionsUnit.Set(&v)
}
// SetItemDimensionsUnitNil sets the value for ItemDimensionsUnit to be an explicit nil
func (o *ShopListingWithAssociations) SetItemDimensionsUnitNil() {
	o.ItemDimensionsUnit.Set(nil)
}

// UnsetItemDimensionsUnit ensures that no value is present for ItemDimensionsUnit, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetItemDimensionsUnit() {
	o.ItemDimensionsUnit.Unset()
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetIsPrivate() bool {
	if o == nil || IsNil(o.IsPrivate) {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetIsPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivate) {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasIsPrivate() bool {
	if o != nil && !IsNil(o.IsPrivate) {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *ShopListingWithAssociations) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetStyle() []string {
	if o == nil || IsNil(o.Style) {
		var ret []string
		return ret
	}
	return o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetStyleOk() ([]string, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given []string and assigns it to the Style field.
func (o *ShopListingWithAssociations) SetStyle(v []string) {
	o.Style = v
}

// GetFileData returns the FileData field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetFileData() string {
	if o == nil || IsNil(o.FileData) {
		var ret string
		return ret
	}
	return *o.FileData
}

// GetFileDataOk returns a tuple with the FileData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetFileDataOk() (*string, bool) {
	if o == nil || IsNil(o.FileData) {
		return nil, false
	}
	return o.FileData, true
}

// HasFileData returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasFileData() bool {
	if o != nil && !IsNil(o.FileData) {
		return true
	}

	return false
}

// SetFileData gets a reference to the given string and assigns it to the FileData field.
func (o *ShopListingWithAssociations) SetFileData(v string) {
	o.FileData = &v
}

// GetHasVariations returns the HasVariations field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetHasVariations() bool {
	if o == nil || IsNil(o.HasVariations) {
		var ret bool
		return ret
	}
	return *o.HasVariations
}

// GetHasVariationsOk returns a tuple with the HasVariations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetHasVariationsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasVariations) {
		return nil, false
	}
	return o.HasVariations, true
}

// HasHasVariations returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasHasVariations() bool {
	if o != nil && !IsNil(o.HasVariations) {
		return true
	}

	return false
}

// SetHasVariations gets a reference to the given bool and assigns it to the HasVariations field.
func (o *ShopListingWithAssociations) SetHasVariations(v bool) {
	o.HasVariations = &v
}

// GetShouldAutoRenew returns the ShouldAutoRenew field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetShouldAutoRenew() bool {
	if o == nil || IsNil(o.ShouldAutoRenew) {
		var ret bool
		return ret
	}
	return *o.ShouldAutoRenew
}

// GetShouldAutoRenewOk returns a tuple with the ShouldAutoRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetShouldAutoRenewOk() (*bool, bool) {
	if o == nil || IsNil(o.ShouldAutoRenew) {
		return nil, false
	}
	return o.ShouldAutoRenew, true
}

// HasShouldAutoRenew returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasShouldAutoRenew() bool {
	if o != nil && !IsNil(o.ShouldAutoRenew) {
		return true
	}

	return false
}

// SetShouldAutoRenew gets a reference to the given bool and assigns it to the ShouldAutoRenew field.
func (o *ShopListingWithAssociations) SetShouldAutoRenew(v bool) {
	o.ShouldAutoRenew = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetLanguage() string {
	if o == nil || IsNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *ShopListingWithAssociations) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *ShopListingWithAssociations) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetLanguage() {
	o.Language.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetPrice() ShopListingPrice {
	if o == nil || IsNil(o.Price) {
		var ret ShopListingPrice
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetPriceOk() (*ShopListingPrice, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given ShopListingPrice and assigns it to the Price field.
func (o *ShopListingWithAssociations) SetPrice(v ShopListingPrice) {
	o.Price = &v
}

// GetTaxonomyId returns the TaxonomyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShopListingWithAssociations) GetTaxonomyId() int32 {
	if o == nil || IsNil(o.TaxonomyId.Get()) {
		var ret int32
		return ret
	}
	return *o.TaxonomyId.Get()
}

// GetTaxonomyIdOk returns a tuple with the TaxonomyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShopListingWithAssociations) GetTaxonomyIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxonomyId.Get(), o.TaxonomyId.IsSet()
}

// HasTaxonomyId returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasTaxonomyId() bool {
	if o != nil && o.TaxonomyId.IsSet() {
		return true
	}

	return false
}

// SetTaxonomyId gets a reference to the given NullableInt32 and assigns it to the TaxonomyId field.
func (o *ShopListingWithAssociations) SetTaxonomyId(v int32) {
	o.TaxonomyId.Set(&v)
}
// SetTaxonomyIdNil sets the value for TaxonomyId to be an explicit nil
func (o *ShopListingWithAssociations) SetTaxonomyIdNil() {
	o.TaxonomyId.Set(nil)
}

// UnsetTaxonomyId ensures that no value is present for TaxonomyId, not even an explicit nil
func (o *ShopListingWithAssociations) UnsetTaxonomyId() {
	o.TaxonomyId.Unset()
}

// GetShippingProfile returns the ShippingProfile field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetShippingProfile() ShopListingWithAssociationsShippingProfile {
	if o == nil || IsNil(o.ShippingProfile) {
		var ret ShopListingWithAssociationsShippingProfile
		return ret
	}
	return *o.ShippingProfile
}

// GetShippingProfileOk returns a tuple with the ShippingProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetShippingProfileOk() (*ShopListingWithAssociationsShippingProfile, bool) {
	if o == nil || IsNil(o.ShippingProfile) {
		return nil, false
	}
	return o.ShippingProfile, true
}

// HasShippingProfile returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasShippingProfile() bool {
	if o != nil && !IsNil(o.ShippingProfile) {
		return true
	}

	return false
}

// SetShippingProfile gets a reference to the given ShopListingWithAssociationsShippingProfile and assigns it to the ShippingProfile field.
func (o *ShopListingWithAssociations) SetShippingProfile(v ShopListingWithAssociationsShippingProfile) {
	o.ShippingProfile = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetUser() ShopListingWithAssociationsUser {
	if o == nil || IsNil(o.User) {
		var ret ShopListingWithAssociationsUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetUserOk() (*ShopListingWithAssociationsUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given ShopListingWithAssociationsUser and assigns it to the User field.
func (o *ShopListingWithAssociations) SetUser(v ShopListingWithAssociationsUser) {
	o.User = &v
}

// GetShop returns the Shop field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetShop() ShopListingWithAssociationsShop {
	if o == nil || IsNil(o.Shop) {
		var ret ShopListingWithAssociationsShop
		return ret
	}
	return *o.Shop
}

// GetShopOk returns a tuple with the Shop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetShopOk() (*ShopListingWithAssociationsShop, bool) {
	if o == nil || IsNil(o.Shop) {
		return nil, false
	}
	return o.Shop, true
}

// HasShop returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasShop() bool {
	if o != nil && !IsNil(o.Shop) {
		return true
	}

	return false
}

// SetShop gets a reference to the given ShopListingWithAssociationsShop and assigns it to the Shop field.
func (o *ShopListingWithAssociations) SetShop(v ShopListingWithAssociationsShop) {
	o.Shop = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetImages() []ShopListingWithAssociationsImagesInner {
	if o == nil || IsNil(o.Images) {
		var ret []ShopListingWithAssociationsImagesInner
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetImagesOk() ([]ShopListingWithAssociationsImagesInner, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ShopListingWithAssociationsImagesInner and assigns it to the Images field.
func (o *ShopListingWithAssociations) SetImages(v []ShopListingWithAssociationsImagesInner) {
	o.Images = v
}

// GetVideos returns the Videos field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetVideos() []ShopListingWithAssociationsVideosInner {
	if o == nil || IsNil(o.Videos) {
		var ret []ShopListingWithAssociationsVideosInner
		return ret
	}
	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetVideosOk() ([]ShopListingWithAssociationsVideosInner, bool) {
	if o == nil || IsNil(o.Videos) {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasVideos() bool {
	if o != nil && !IsNil(o.Videos) {
		return true
	}

	return false
}

// SetVideos gets a reference to the given []ShopListingWithAssociationsVideosInner and assigns it to the Videos field.
func (o *ShopListingWithAssociations) SetVideos(v []ShopListingWithAssociationsVideosInner) {
	o.Videos = v
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetInventory() ShopListingWithAssociationsInventory {
	if o == nil || IsNil(o.Inventory) {
		var ret ShopListingWithAssociationsInventory
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetInventoryOk() (*ShopListingWithAssociationsInventory, bool) {
	if o == nil || IsNil(o.Inventory) {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasInventory() bool {
	if o != nil && !IsNil(o.Inventory) {
		return true
	}

	return false
}

// SetInventory gets a reference to the given ShopListingWithAssociationsInventory and assigns it to the Inventory field.
func (o *ShopListingWithAssociations) SetInventory(v ShopListingWithAssociationsInventory) {
	o.Inventory = &v
}

// GetProductionPartners returns the ProductionPartners field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetProductionPartners() []ShopListingWithAssociationsProductionPartnersInner {
	if o == nil || IsNil(o.ProductionPartners) {
		var ret []ShopListingWithAssociationsProductionPartnersInner
		return ret
	}
	return o.ProductionPartners
}

// GetProductionPartnersOk returns a tuple with the ProductionPartners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetProductionPartnersOk() ([]ShopListingWithAssociationsProductionPartnersInner, bool) {
	if o == nil || IsNil(o.ProductionPartners) {
		return nil, false
	}
	return o.ProductionPartners, true
}

// HasProductionPartners returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasProductionPartners() bool {
	if o != nil && !IsNil(o.ProductionPartners) {
		return true
	}

	return false
}

// SetProductionPartners gets a reference to the given []ShopListingWithAssociationsProductionPartnersInner and assigns it to the ProductionPartners field.
func (o *ShopListingWithAssociations) SetProductionPartners(v []ShopListingWithAssociationsProductionPartnersInner) {
	o.ProductionPartners = v
}

// GetSkus returns the Skus field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetSkus() []string {
	if o == nil || IsNil(o.Skus) {
		var ret []string
		return ret
	}
	return o.Skus
}

// GetSkusOk returns a tuple with the Skus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetSkusOk() ([]string, bool) {
	if o == nil || IsNil(o.Skus) {
		return nil, false
	}
	return o.Skus, true
}

// HasSkus returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasSkus() bool {
	if o != nil && !IsNil(o.Skus) {
		return true
	}

	return false
}

// SetSkus gets a reference to the given []string and assigns it to the Skus field.
func (o *ShopListingWithAssociations) SetSkus(v []string) {
	o.Skus = v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetTranslations() []ShopListingWithAssociationsTranslationsInner {
	if o == nil || IsNil(o.Translations) {
		var ret []ShopListingWithAssociationsTranslationsInner
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetTranslationsOk() ([]ShopListingWithAssociationsTranslationsInner, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []ShopListingWithAssociationsTranslationsInner and assigns it to the Translations field.
func (o *ShopListingWithAssociations) SetTranslations(v []ShopListingWithAssociationsTranslationsInner) {
	o.Translations = v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *ShopListingWithAssociations) GetViews() int32 {
	if o == nil || IsNil(o.Views) {
		var ret int32
		return ret
	}
	return *o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopListingWithAssociations) GetViewsOk() (*int32, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *ShopListingWithAssociations) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given int32 and assigns it to the Views field.
func (o *ShopListingWithAssociations) SetViews(v int32) {
	o.Views = &v
}

func (o ShopListingWithAssociations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShopListingWithAssociations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ListingId) {
		toSerialize["listing_id"] = o.ListingId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creation_timestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.EndingTimestamp) {
		toSerialize["ending_timestamp"] = o.EndingTimestamp
	}
	if !IsNil(o.OriginalCreationTimestamp) {
		toSerialize["original_creation_timestamp"] = o.OriginalCreationTimestamp
	}
	if !IsNil(o.LastModifiedTimestamp) {
		toSerialize["last_modified_timestamp"] = o.LastModifiedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.StateTimestamp) {
		toSerialize["state_timestamp"] = o.StateTimestamp
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if o.ShopSectionId.IsSet() {
		toSerialize["shop_section_id"] = o.ShopSectionId.Get()
	}
	if !IsNil(o.FeaturedRank) {
		toSerialize["featured_rank"] = o.FeaturedRank
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.NumFavorers) {
		toSerialize["num_favorers"] = o.NumFavorers
	}
	if !IsNil(o.NonTaxable) {
		toSerialize["non_taxable"] = o.NonTaxable
	}
	if !IsNil(o.IsTaxable) {
		toSerialize["is_taxable"] = o.IsTaxable
	}
	if !IsNil(o.IsCustomizable) {
		toSerialize["is_customizable"] = o.IsCustomizable
	}
	if !IsNil(o.IsPersonalizable) {
		toSerialize["is_personalizable"] = o.IsPersonalizable
	}
	if !IsNil(o.PersonalizationIsRequired) {
		toSerialize["personalization_is_required"] = o.PersonalizationIsRequired
	}
	if o.PersonalizationCharCountMax.IsSet() {
		toSerialize["personalization_char_count_max"] = o.PersonalizationCharCountMax.Get()
	}
	if o.PersonalizationInstructions.IsSet() {
		toSerialize["personalization_instructions"] = o.PersonalizationInstructions.Get()
	}
	if !IsNil(o.ListingType) {
		toSerialize["listing_type"] = o.ListingType
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Materials) {
		toSerialize["materials"] = o.Materials
	}
	if o.ShippingProfileId.IsSet() {
		toSerialize["shipping_profile_id"] = o.ShippingProfileId.Get()
	}
	if o.ReturnPolicyId.IsSet() {
		toSerialize["return_policy_id"] = o.ReturnPolicyId.Get()
	}
	if o.ProcessingMin.IsSet() {
		toSerialize["processing_min"] = o.ProcessingMin.Get()
	}
	if o.ProcessingMax.IsSet() {
		toSerialize["processing_max"] = o.ProcessingMax.Get()
	}
	if o.WhoMade.IsSet() {
		toSerialize["who_made"] = o.WhoMade.Get()
	}
	if o.WhenMade.IsSet() {
		toSerialize["when_made"] = o.WhenMade.Get()
	}
	if o.IsSupply.IsSet() {
		toSerialize["is_supply"] = o.IsSupply.Get()
	}
	if o.ItemWeight.IsSet() {
		toSerialize["item_weight"] = o.ItemWeight.Get()
	}
	if o.ItemWeightUnit.IsSet() {
		toSerialize["item_weight_unit"] = o.ItemWeightUnit.Get()
	}
	if o.ItemLength.IsSet() {
		toSerialize["item_length"] = o.ItemLength.Get()
	}
	if o.ItemWidth.IsSet() {
		toSerialize["item_width"] = o.ItemWidth.Get()
	}
	if o.ItemHeight.IsSet() {
		toSerialize["item_height"] = o.ItemHeight.Get()
	}
	if o.ItemDimensionsUnit.IsSet() {
		toSerialize["item_dimensions_unit"] = o.ItemDimensionsUnit.Get()
	}
	if !IsNil(o.IsPrivate) {
		toSerialize["is_private"] = o.IsPrivate
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.FileData) {
		toSerialize["file_data"] = o.FileData
	}
	if !IsNil(o.HasVariations) {
		toSerialize["has_variations"] = o.HasVariations
	}
	if !IsNil(o.ShouldAutoRenew) {
		toSerialize["should_auto_renew"] = o.ShouldAutoRenew
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if o.TaxonomyId.IsSet() {
		toSerialize["taxonomy_id"] = o.TaxonomyId.Get()
	}
	if !IsNil(o.ShippingProfile) {
		toSerialize["shipping_profile"] = o.ShippingProfile
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Shop) {
		toSerialize["shop"] = o.Shop
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.Videos) {
		toSerialize["videos"] = o.Videos
	}
	if !IsNil(o.Inventory) {
		toSerialize["inventory"] = o.Inventory
	}
	if !IsNil(o.ProductionPartners) {
		toSerialize["production_partners"] = o.ProductionPartners
	}
	if !IsNil(o.Skus) {
		toSerialize["skus"] = o.Skus
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}
	return toSerialize, nil
}

type NullableShopListingWithAssociations struct {
	value *ShopListingWithAssociations
	isSet bool
}

func (v NullableShopListingWithAssociations) Get() *ShopListingWithAssociations {
	return v.value
}

func (v *NullableShopListingWithAssociations) Set(val *ShopListingWithAssociations) {
	v.value = val
	v.isSet = true
}

func (v NullableShopListingWithAssociations) IsSet() bool {
	return v.isSet
}

func (v *NullableShopListingWithAssociations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopListingWithAssociations(val *ShopListingWithAssociations) *NullableShopListingWithAssociations {
	return &NullableShopListingWithAssociations{value: val, isSet: true}
}

func (v NullableShopListingWithAssociations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopListingWithAssociations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


